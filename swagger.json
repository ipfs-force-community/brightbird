{
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "BrightBird API.",
    "contact": {
      "email": "venus@ipfsconmmunity.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "host": "192.168.200.103:12356",
  "basePath": "/api/v1",
  "paths": {
    "/changegroup": {
      "post": {
        "description": "change testflow group id",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "testflow"
        ],
        "operationId": "changeGroupRequest",
        "parameters": [
          {
            "description": "update to submit",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/changeTestflowGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/count-plugins": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "plugin"
        ],
        "summary": "Counts the number of plugins.",
        "operationId": "countPluginsReq",
        "responses": {
          "200": {
            "description": "  //todo fix correctstruct",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "500": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/download": {
      "get": {
        "produces": [
          "application/zip"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "download"
        ],
        "summary": "Download a directory as a zip file.",
        "operationId": "downloadParams",
        "responses": {
          "500": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/failed-tasks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "failed-tasks"
        ],
        "summary": "Lists the failed tasks.",
        "operationId": "listFailedTasksReq",
        "responses": {
          "200": {
            "description": "  //todo fix correctstruct",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "500": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/group": {
      "post": {
        "description": "Save group",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "group"
        ],
        "operationId": "saveCases",
        "parameters": [
          {
            "description": "group json",
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "description": "group json",
              "type": "object",
              "$ref": "#/definitions/group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "myString",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/group/count": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "group"
        ],
        "summary": "Count group by condition.",
        "operationId": "countGroup",
        "parameters": [
          {
            "type": "string",
            "description": "group id",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "group name",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/group/list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "group"
        ],
        "summary": "Lists all group.",
        "operationId": "listGroup",
        "responses": {
          "200": {
            "description": "listGroupResp",
            "schema": {
              "$ref": "#/definitions/listGroupResp"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/group/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "group"
        ],
        "summary": "Get specific group by id.",
        "operationId": "getGroupById",
        "parameters": [
          {
            "type": "string",
            "description": "id of group",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "groupResp",
            "schema": {
              "$ref": "#/definitions/groupResp"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "post": {
        "description": "Update group name/show/description",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "group"
        ],
        "operationId": "updateGroup",
        "parameters": [
          {
            "type": "string",
            "description": "id of group",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "update group request json",
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "description": "update group request json",
              "type": "object",
              "$ref": "#/definitions/updateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "delete": {
        "description": "Delete group by id",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "group"
        ],
        "operationId": "deleteGroup",
        "parameters": [
          {
            "type": "string",
            "description": "id of  group",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/job": {
      "post": {
        "description": "save job entity, create if not exist",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "job"
        ],
        "operationId": "saveJob",
        "parameters": [
          {
            "description": "job json",
            "name": "job",
            "in": "body",
            "required": true,
            "schema": {
              "description": "job json",
              "type": "object",
              "$ref": "#/definitions/job"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "myString",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/job/count": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "job"
        ],
        "summary": "Count all jobs by condition.",
        "operationId": "countJobRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "id of job",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "name of job",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "listJobResp",
            "schema": {
              "$ref": "#/definitions/listJobResp"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/job/detail/{id}": {
      "get": {
        "description": "Get job detail by id",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "job"
        ],
        "operationId": "getJob",
        "parameters": [
          {
            "type": "string",
            "description": "job id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "jobDetailResp",
            "schema": {
              "$ref": "#/definitions/jobDetailResp"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/job/list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "job"
        ],
        "summary": "Lists all jobs.",
        "operationId": "listJobs",
        "responses": {
          "200": {
            "description": "listJobResp",
            "schema": {
              "$ref": "#/definitions/listJobResp"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/job/next": {
      "get": {
        "description": "Get job schedule",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "job"
        ],
        "operationId": "jobNextNReq",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "N",
            "name": "n",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "int64Arr",
            "schema": {
              "$ref": "#/definitions/int64Arr"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/job/{id}": {
      "get": {
        "description": "Update job",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "job"
        ],
        "operationId": "updateJob",
        "parameters": [
          {
            "type": "string",
            "description": "job id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "job update params",
            "name": "updateJobParams",
            "in": "body",
            "required": true,
            "schema": {
              "description": "job update params",
              "type": "object",
              "$ref": "#/definitions/updateJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "job",
            "schema": {
              "$ref": "#/definitions/job"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "delete": {
        "description": "Delete job by id",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "job"
        ],
        "operationId": "deleteJob",
        "parameters": [
          {
            "type": "string",
            "description": "id of  job",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/logs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "log"
        ],
        "summary": "get all logs in pod.",
        "operationId": "podLogReq",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TestID",
            "description": "testid of task",
            "name": "testID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "PodName",
            "description": "pod name",
            "name": "podLog",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "logResp",
            "schema": {
              "$ref": "#/definitions/logResp"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/logs/pods/{testid}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "log"
        ],
        "summary": "List all pod names in test.",
        "operationId": "listPodsInTest",
        "parameters": [
          {
            "type": "string",
            "description": "test id",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "stringArr",
            "schema": {
              "$ref": "#/definitions/stringArr"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/pass-rate-trends": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "task"
        ],
        "summary": "Gets the pass rate trends for the last 30 days.",
        "operationId": "passRateTrends",
        "responses": {
          "200": {
            "description": "  //todo fix correctstruct",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "500": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/plugin": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "plugin"
        ],
        "summary": "Get plugin by name and version.",
        "operationId": "getPluginParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "id of plugin",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "name of plugin",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PluginType",
            "description": "plugin type",
            "name": "pluginType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "pluginDetail",
            "schema": {
              "$ref": "#/definitions/pluginDetail"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "delete": {
        "description": "Delete plugin by id and specific version",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "plugin"
        ],
        "operationId": "deletePluginReq",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "id of plugin",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Version",
            "description": "specific plugin version",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/plugin/def": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "plugin"
        ],
        "summary": "Get plugin by name and version.",
        "operationId": "getPluginDef",
        "responses": {
          "200": {
            "description": "pluginDetail",
            "schema": {
              "$ref": "#/definitions/pluginDetail"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/plugin/import": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/text"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "plugin"
        ],
        "summary": "import plugin.",
        "operationId": "importPlugin",
        "parameters": [
          {
            "type": "string",
            "description": "directory of plugins",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/plugin/label": {
      "post": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "plugin"
        ],
        "summary": "Add label in plugin.",
        "operationId": "addLabelParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "name of plugin",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Label",
            "description": "plugin type",
            "name": "label",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "plugin"
        ],
        "summary": "Delete label in plugin.",
        "operationId": "deleteLabelParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "name of plugin",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Label",
            "description": "plugin type",
            "name": "label",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/plugin/list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "plugin"
        ],
        "summary": "List plugin by name and version.",
        "operationId": "listPluginParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "name of plugin",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PluginType",
            "description": "plugin type",
            "name": "pluginType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "pluginDetail",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pluginDetail"
              }
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/plugin/upload": {
      "post": {
        "description": "Upload plugin files",
        "produces": [
          "application/json"
        ],
        "tags": [
          "plugin"
        ],
        "operationId": "uploadPluginFilesParams",
        "parameters": [
          {
            "type": "file",
            "x-go-name": "PluginFiles",
            "description": "Plugin file.",
            "name": "plugins",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/run/{jobid}": {
      "post": {
        "description": "run job immediately",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "job"
        ],
        "operationId": "runJobImmediately",
        "parameters": [
          {
            "type": "string",
            "description": "job id",
            "name": "jobid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "myString",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/success-quantity-trends": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "success-quantity-trends"
        ],
        "summary": "Retrieves the success quantity trends.",
        "operationId": "successQuantityTrendsReq",
        "responses": {
          "200": {
            "description": "  //todo fix correctstruct",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "500": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/task": {
      "get": {
        "description": "Get task by condition",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "task"
        ],
        "operationId": "getTaskReq",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "TestID",
            "name": "testID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "ID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "task",
            "schema": {
              "$ref": "#/definitions/task"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/task-count": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "tasks"
        ],
        "summary": "Retrieves the Statistics of tasks.",
        "operationId": "getTaskCount",
        "responses": {
          "200": {
            "description": "  //todo fix correctstruct",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "500": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/task/stop/{id}": {
      "delete": {
        "description": "stop task",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "task"
        ],
        "operationId": "stopTask",
        "parameters": [
          {
            "type": "string",
            "description": "id of  job",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/task/{id}": {
      "delete": {
        "description": "Delete task by id",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "task"
        ],
        "operationId": "deleteTask",
        "parameters": [
          {
            "type": "string",
            "description": "id of  job",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/test-data": {
      "get": {
        "description": "Lists the amount of tasks for a job in the last 2 weeks.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "test-data"
        ],
        "summary": "Lists test data.",
        "operationId": "listTestData",
        "responses": {
          "200": {
            "description": "  //todo fix correctstruct",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "500": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/testflow": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "testflow"
        ],
        "summary": "Get specific test case by condition.",
        "operationId": "getTestFlowRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "id of testflow",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "name of testflow",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "testFlow",
            "schema": {
              "$ref": "#/definitions/testFlow"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      },
      "post": {
        "description": "save test case, create if not exist",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "testflow"
        ],
        "operationId": "saveTestFlow",
        "parameters": [
          {
            "description": "test flow json",
            "name": "testflow",
            "in": "body",
            "required": true,
            "schema": {
              "description": "test flow json",
              "type": "object",
              "$ref": "#/definitions/testFlow"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/testflow/count": {
      "get": {
        "description": "Count testflow numbers in group",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "testflow"
        ],
        "operationId": "countTestFlowRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "GroupID",
            "description": "id of group",
            "name": "groupId",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "name of testflow",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/testflow/list": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "testflow"
        ],
        "summary": "Lists test flows.",
        "operationId": "listInGroupRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "GroupID",
            "description": "id of group",
            "name": "groupId",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "name of testflow",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageNum",
            "name": "pageNum",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "listTestFlowResp",
            "schema": {
              "$ref": "#/definitions/listTestFlowResp"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/testflow/{id}": {
      "delete": {
        "description": "Delete test flow by id",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "testflow"
        ],
        "operationId": "deleteTestFlow",
        "parameters": [
          {
            "type": "string",
            "description": "id of test flow",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/today-pass-rate-ranking": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "task"
        ],
        "summary": "Retrieves the top 3 job pass rates for today.",
        "operationId": "todayPassRateRankingReq",
        "responses": {
          "200": {
            "description": "  //todo fix correctstruct",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "500": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "get backend version",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "version"
        ],
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "myString",
            "schema": {
              "$ref": "#/definitions/myString"
            }
          },
          "503": {
            "description": "apiError",
            "schema": {
              "$ref": "#/definitions/apiError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Access": {
      "description": "Access access",
      "type": "object",
      "properties": {
        "action": {
          "description": "The action of the access",
          "type": "string",
          "x-go-name": "Action"
        },
        "effect": {
          "description": "The effect of the access",
          "type": "string",
          "x-go-name": "Effect"
        },
        "resource": {
          "description": "The resource of the access",
          "type": "string",
          "x-go-name": "Resource"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Accessory": {
      "description": "Accessory The accessory of the artifact",
      "type": "object",
      "properties": {
        "artifact_id": {
          "description": "The artifact id of the accessory",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArtifactID"
        },
        "creation_time": {
          "description": "The creation time of the accessory\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "digest": {
          "description": "The artifact digest of the accessory",
          "type": "string",
          "x-go-name": "Digest"
        },
        "icon": {
          "description": "The icon of the accessory",
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "description": "The ID of the accessory",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "size": {
          "description": "The artifact size of the accessory",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "subject_artifact_id": {
          "description": "The subject artifact id of the accessory",
          "type": "integer",
          "format": "int64",
          "x-go-name": "SubjectArtifactID"
        },
        "type": {
          "description": "The artifact size of the accessory",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ActionRequest": {
      "description": "ActionRequest The request to stop, pause or resume",
      "type": "object",
      "properties": {
        "action": {
          "description": "The action of the request, should be stop, pause or resume",
          "type": "string",
          "enum": [
            "[stop pause resume]"
          ],
          "x-go-name": "Action"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "AdditionLink": {
      "description": "AdditionLink addition link",
      "type": "object",
      "properties": {
        "absolute": {
          "description": "Determine whether the link is an absolute URL or not",
          "type": "boolean",
          "x-go-name": "Absolute"
        },
        "href": {
          "description": "The link of the addition",
          "type": "string",
          "x-go-name": "Href"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "AdditionLinks": {
      "description": "AdditionLinks addition links",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AdditionLink"
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Annotations": {
      "description": "Annotations annotations",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Artifact": {
      "description": "Artifact artifact",
      "type": "object",
      "properties": {
        "accessories": {
          "description": "accessories",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Accessory"
          },
          "x-go-name": "Accessories"
        },
        "addition_links": {
          "$ref": "#/definitions/AdditionLinks"
        },
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "digest": {
          "description": "The digest of the artifact",
          "type": "string",
          "x-go-name": "Digest"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "icon": {
          "description": "The digest of the icon",
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "description": "The ID of the artifact",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "labels": {
          "description": "labels",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "x-go-name": "Labels"
        },
        "manifest_media_type": {
          "description": "The manifest media type of the artifact",
          "type": "string",
          "x-go-name": "ManifestMediaType"
        },
        "media_type": {
          "description": "The media type of the artifact",
          "type": "string",
          "x-go-name": "MediaType"
        },
        "project_id": {
          "description": "The ID of the project that the artifact belongs to",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProjectID"
        },
        "pull_time": {
          "description": "The latest pull time of the artifact\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "PullTime"
        },
        "push_time": {
          "description": "The push time of the artifact\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "PushTime"
        },
        "references": {
          "description": "references",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "x-go-name": "References"
        },
        "repository_id": {
          "description": "The ID of the repository that the artifact belongs to",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepositoryID"
        },
        "scan_overview": {
          "$ref": "#/definitions/ScanOverview"
        },
        "size": {
          "description": "The size of the artifact",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "x-go-name": "Tags"
        },
        "type": {
          "description": "The type of the artifact, e.g. image, chart, etc",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "AuditLog": {
      "description": "AuditLog audit log",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the audit log entry.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "op_time": {
          "description": "The time when this operation is triggered.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "OpTime"
        },
        "operation": {
          "description": "The operation against the repository in this log entry.",
          "type": "string",
          "x-go-name": "Operation"
        },
        "resource": {
          "description": "Name of the repository in this log entry.",
          "type": "string",
          "x-go-name": "Resource"
        },
        "resource_type": {
          "description": "Tag of the repository in this log entry.",
          "type": "string",
          "x-go-name": "ResourceType"
        },
        "username": {
          "description": "Username of the user in this log entry.",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "AuthproxySetting": {
      "description": "AuthproxySetting authproxy setting",
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "server_certificate": {
          "description": "The certificate to be pinned when connecting auth proxy.",
          "type": "string",
          "x-go-name": "ServerCertificate"
        },
        "skip_search": {
          "description": "The flag to determine whether Harbor can skip search the user/group when adding him as a member.",
          "type": "boolean",
          "x-go-name": "SkipSearch"
        },
        "tokenreivew_endpoint": {
          "description": "The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'",
          "type": "string",
          "x-go-name": "TokenreivewEndpoint"
        },
        "verify_cert": {
          "description": "The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.",
          "type": "boolean",
          "x-go-name": "VerifyCert"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "BaseTime": {
      "type": "object",
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        }
      },
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "BoolConfigItem": {
      "description": "BoolConfigItem bool config item",
      "type": "object",
      "properties": {
        "editable": {
          "description": "The configure item can be updated or not",
          "type": "boolean",
          "x-go-name": "Editable"
        },
        "value": {
          "description": "The boolean value of current config item",
          "type": "boolean",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "CVEAllowlist": {
      "description": "CVEAllowlist The CVE Allowlist for system or project",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the allowlist.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "expires_at": {
          "description": "the time for expiration of the allowlist, in the form of seconds since epoch.  This is an optional attribute, if it's not set the CVE allowlist does not expire.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresAt"
        },
        "id": {
          "description": "ID of the allowlist",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "items": {
          "description": "items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CVEAllowlistItem"
          },
          "x-go-name": "Items"
        },
        "project_id": {
          "description": "ID of the project which the allowlist belongs to.  For system level allowlist this attribute is zero.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProjectID"
        },
        "update_time": {
          "description": "The update time of the allowlist.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "CVEAllowlistItem": {
      "description": "CVEAllowlistItem The item in CVE allowlist",
      "type": "object",
      "properties": {
        "cve_id": {
          "description": "The ID of the CVE, such as \"CVE-2019-10164\"",
          "type": "string",
          "x-go-name": "CVEID"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ChartMetadata": {
      "description": "ChartMetadata The metadata of chart version",
      "type": "object",
      "required": [
        "apiVersion",
        "appVersion",
        "engine",
        "icon",
        "name",
        "version"
      ],
      "properties": {
        "apiVersion": {
          "description": "The API version of this chart",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "appVersion": {
          "description": "The version of the application enclosed in the chart",
          "type": "string",
          "x-go-name": "AppVersion"
        },
        "deprecated": {
          "description": "Whether or not this chart is deprecated",
          "type": "boolean",
          "x-go-name": "Deprecated"
        },
        "description": {
          "description": "A one-sentence description of chart",
          "type": "string",
          "x-go-name": "Description"
        },
        "engine": {
          "description": "The name of template engine",
          "type": "string",
          "x-go-name": "Engine"
        },
        "home": {
          "description": "The URL to the relevant project page",
          "type": "string",
          "x-go-name": "Home"
        },
        "icon": {
          "description": "The URL to an icon file",
          "type": "string",
          "x-go-name": "Icon"
        },
        "keywords": {
          "description": "A list of string keywords",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Keywords"
        },
        "name": {
          "description": "The name of the chart",
          "type": "string",
          "x-go-name": "Name"
        },
        "sources": {
          "description": "The URL to the source code of chart",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Sources"
        },
        "version": {
          "description": "A SemVer 2 version of chart",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ChartVersion": {
      "description": "ChartVersion A specified chart entry",
      "type": "object",
      "required": [
        "apiVersion",
        "appVersion",
        "engine",
        "icon",
        "name",
        "version"
      ],
      "properties": {
        "apiVersion": {
          "description": "The API version of this chart",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "appVersion": {
          "description": "The version of the application enclosed in the chart",
          "type": "string",
          "x-go-name": "AppVersion"
        },
        "created": {
          "description": "The created time of the chart entry",
          "type": "string",
          "x-go-name": "Created"
        },
        "deprecated": {
          "description": "Whether or not this chart is deprecated",
          "type": "boolean",
          "x-go-name": "Deprecated"
        },
        "description": {
          "description": "A one-sentence description of chart",
          "type": "string",
          "x-go-name": "Description"
        },
        "digest": {
          "description": "The digest value of the chart entry",
          "type": "string",
          "x-go-name": "Digest"
        },
        "engine": {
          "description": "The name of template engine",
          "type": "string",
          "x-go-name": "Engine"
        },
        "home": {
          "description": "The URL to the relevant project page",
          "type": "string",
          "x-go-name": "Home"
        },
        "icon": {
          "description": "The URL to an icon file",
          "type": "string",
          "x-go-name": "Icon"
        },
        "keywords": {
          "description": "A list of string keywords",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Keywords"
        },
        "labels": {
          "description": "A list of label",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "The name of the chart",
          "type": "string",
          "x-go-name": "Name"
        },
        "removed": {
          "description": "A flag to indicate if the chart entry is removed",
          "type": "boolean",
          "x-go-name": "Removed"
        },
        "sources": {
          "description": "The URL to the source code of chart",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Sources"
        },
        "urls": {
          "description": "The urls of the chart entry",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Urls"
        },
        "version": {
          "description": "A SemVer 2 version of chart",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ComponentHealthStatus": {
      "description": "ComponentHealthStatus The health status of component",
      "type": "object",
      "properties": {
        "error": {
          "description": "(optional) The error message when the status is \"unhealthy\"",
          "type": "string",
          "x-go-name": "Error"
        },
        "name": {
          "description": "The component name",
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "description": "The health status of component",
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Configurations": {
      "description": "Configurations configurations",
      "type": "object",
      "properties": {
        "audit_log_forward_endpoint": {
          "description": "The audit log forward endpoint",
          "type": "string",
          "x-go-name": "AuditLogForwardEndpoint"
        },
        "auth_mode": {
          "description": "The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"",
          "type": "string",
          "x-go-name": "AuthMode"
        },
        "http_authproxy_admin_groups": {
          "description": "The group which has the harbor admin privileges",
          "type": "string",
          "x-go-name": "HTTPAuthproxyAdminGroups"
        },
        "http_authproxy_admin_usernames": {
          "description": "The username which has the harbor admin privileges",
          "type": "string",
          "x-go-name": "HTTPAuthproxyAdminUsernames"
        },
        "http_authproxy_endpoint": {
          "description": "The endpoint of the HTTP auth",
          "type": "string",
          "x-go-name": "HTTPAuthproxyEndpoint"
        },
        "http_authproxy_server_certificate": {
          "description": "The certificate of the HTTP auth provider",
          "type": "string",
          "x-go-name": "HTTPAuthproxyServerCertificate"
        },
        "http_authproxy_skip_search": {
          "description": "Search user before onboard",
          "type": "boolean",
          "x-go-name": "HTTPAuthproxySkipSearch"
        },
        "http_authproxy_tokenreview_endpoint": {
          "description": "The token review endpoint",
          "type": "string",
          "x-go-name": "HTTPAuthproxyTokenreviewEndpoint"
        },
        "http_authproxy_verify_cert": {
          "description": "Verify the HTTP auth provider's certificate",
          "type": "boolean",
          "x-go-name": "HTTPAuthproxyVerifyCert"
        },
        "ldap_base_dn": {
          "description": "The Base DN for LDAP binding.",
          "type": "string",
          "x-go-name": "LdapBaseDn"
        },
        "ldap_filter": {
          "description": "The filter for LDAP search",
          "type": "string",
          "x-go-name": "LdapFilter"
        },
        "ldap_group_admin_dn": {
          "description": "Specify the ldap group which have the same privilege with Harbor admin",
          "type": "string",
          "x-go-name": "LdapGroupAdminDn"
        },
        "ldap_group_attribute_name": {
          "description": "The attribute which is used as identity of the LDAP group, default is cn.'",
          "type": "string",
          "x-go-name": "LdapGroupAttributeName"
        },
        "ldap_group_base_dn": {
          "description": "The base DN to search LDAP group.",
          "type": "string",
          "x-go-name": "LdapGroupBaseDn"
        },
        "ldap_group_membership_attribute": {
          "description": "The user attribute to identify the group membership",
          "type": "string",
          "x-go-name": "LdapGroupMembershipAttribute"
        },
        "ldap_group_search_filter": {
          "description": "The filter to search the ldap group",
          "type": "string",
          "x-go-name": "LdapGroupSearchFilter"
        },
        "ldap_group_search_scope": {
          "description": "The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdapGroupSearchScope"
        },
        "ldap_scope": {
          "description": "The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdapScope"
        },
        "ldap_search_dn": {
          "description": "The DN of the user to do the search.",
          "type": "string",
          "x-go-name": "LdapSearchDn"
        },
        "ldap_search_password": {
          "description": "The password of the ldap search dn",
          "type": "string",
          "x-go-name": "LdapSearchPassword"
        },
        "ldap_timeout": {
          "description": "Timeout in seconds for connection to LDAP server",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdapTimeout"
        },
        "ldap_uid": {
          "description": "The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"",
          "type": "string",
          "x-go-name": "LdapUID"
        },
        "ldap_url": {
          "description": "The URL of LDAP server",
          "type": "string",
          "x-go-name": "LdapURL"
        },
        "ldap_verify_cert": {
          "description": "Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.",
          "type": "boolean",
          "x-go-name": "LdapVerifyCert"
        },
        "notification_enable": {
          "description": "Enable notification",
          "type": "boolean",
          "x-go-name": "NotificationEnable"
        },
        "oidc_admin_group": {
          "description": "The OIDC group which has the harbor admin privileges",
          "type": "string",
          "x-go-name": "OIDCAdminGroup"
        },
        "oidc_auto_onboard": {
          "description": "Auto onboard the OIDC user",
          "type": "boolean",
          "x-go-name": "OIDCAutoOnboard"
        },
        "oidc_client_id": {
          "description": "The client ID of the OIDC provider",
          "type": "string",
          "x-go-name": "OIDCClientID"
        },
        "oidc_client_secret": {
          "description": "The OIDC provider secret",
          "type": "string",
          "x-go-name": "OIDCClientSecret"
        },
        "oidc_endpoint": {
          "description": "The endpoint of the OIDC provider",
          "type": "string",
          "x-go-name": "OIDCEndpoint"
        },
        "oidc_extra_redirect_parms": {
          "description": "Extra parameters to add when redirect request to OIDC provider",
          "type": "string",
          "x-go-name": "OIDCExtraRedirectParms"
        },
        "oidc_group_filter": {
          "description": "The OIDC group filter which filters out the group name doesn't match the regular expression",
          "type": "string",
          "x-go-name": "OIDCGroupFilter"
        },
        "oidc_groups_claim": {
          "description": "The attribute claims the group name",
          "type": "string",
          "x-go-name": "OIDCGroupsClaim"
        },
        "oidc_name": {
          "description": "The OIDC provider name",
          "type": "string",
          "x-go-name": "OIDCName"
        },
        "oidc_scope": {
          "description": "The scope of the OIDC provider",
          "type": "string",
          "x-go-name": "OIDCScope"
        },
        "oidc_user_claim": {
          "description": "The attribute claims the username",
          "type": "string",
          "x-go-name": "OIDCUserClaim"
        },
        "oidc_verify_cert": {
          "description": "Verify the OIDC provider's certificate'",
          "type": "boolean",
          "x-go-name": "OIDCVerifyCert"
        },
        "project_creation_restriction": {
          "description": "Indicate who can create projects, it could be ''adminonly'' or ''everyone''.",
          "type": "string",
          "x-go-name": "ProjectCreationRestriction"
        },
        "quota_per_project_enable": {
          "description": "Enable quota per project",
          "type": "boolean",
          "x-go-name": "QuotaPerProjectEnable"
        },
        "read_only": {
          "description": "The flag to indicate whether Harbor is in readonly mode.",
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "robot_name_prefix": {
          "description": "The rebot account name prefix",
          "type": "string",
          "x-go-name": "RobotNamePrefix"
        },
        "robot_token_duration": {
          "description": "The robot account token duration in days",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RobotTokenDuration"
        },
        "self_registration": {
          "description": "Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.",
          "type": "boolean",
          "x-go-name": "SelfRegistration"
        },
        "session_timeout": {
          "description": "The session timeout for harbor, in minutes.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "SessionTimeout"
        },
        "skip_audit_log_database": {
          "description": "Skip audit log database",
          "type": "boolean",
          "x-go-name": "SkipAuditLogDatabase"
        },
        "storage_per_project": {
          "description": "The storage quota per project",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StoragePerProject"
        },
        "token_expiration": {
          "description": "The expiration time of the token for internal Registry, in minutes.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TokenExpiration"
        },
        "uaa_client_id": {
          "description": "The client id of UAA",
          "type": "string",
          "x-go-name": "UaaClientID"
        },
        "uaa_client_secret": {
          "description": "The client secret of the UAA",
          "type": "string",
          "x-go-name": "UaaClientSecret"
        },
        "uaa_endpoint": {
          "description": "The endpoint of the UAA",
          "type": "string",
          "x-go-name": "UaaEndpoint"
        },
        "uaa_verify_cert": {
          "description": "Verify the certificate in UAA server",
          "type": "boolean",
          "x-go-name": "UaaVerifyCert"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ConfigurationsResponse": {
      "description": "ConfigurationsResponse configurations response",
      "type": "object",
      "properties": {
        "audit_log_forward_endpoint": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "auth_mode": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_admin_groups": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_admin_usernames": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_endpoint": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_server_certificate": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_skip_search": {
          "$ref": "#/definitions/BoolConfigItem"
        },
        "http_authproxy_tokenreview_endpoint": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "http_authproxy_verify_cert": {
          "$ref": "#/definitions/BoolConfigItem"
        },
        "ldap_base_dn": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_filter": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_admin_dn": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_attribute_name": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_base_dn": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_membership_attribute": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_search_filter": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_group_search_scope": {
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "ldap_scope": {
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "ldap_search_dn": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_timeout": {
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "ldap_uid": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_url": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "ldap_verify_cert": {
          "$ref": "#/definitions/BoolConfigItem"
        },
        "notification_enable": {
          "$ref": "#/definitions/BoolConfigItem"
        },
        "oidc_admin_group": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_auto_onboard": {
          "$ref": "#/definitions/BoolConfigItem"
        },
        "oidc_client_id": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_endpoint": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_extra_redirect_parms": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_group_filter": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_groups_claim": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_name": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_scope": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_user_claim": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "oidc_verify_cert": {
          "$ref": "#/definitions/BoolConfigItem"
        },
        "project_creation_restriction": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "quota_per_project_enable": {
          "$ref": "#/definitions/BoolConfigItem"
        },
        "read_only": {
          "$ref": "#/definitions/BoolConfigItem"
        },
        "robot_name_prefix": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "robot_token_duration": {
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "scan_all_policy": {
          "$ref": "#/definitions/ConfigurationsResponseScanAllPolicy"
        },
        "self_registration": {
          "$ref": "#/definitions/BoolConfigItem"
        },
        "session_timeout": {
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "skip_audit_log_database": {
          "$ref": "#/definitions/BoolConfigItem"
        },
        "storage_per_project": {
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "token_expiration": {
          "$ref": "#/definitions/IntegerConfigItem"
        },
        "uaa_client_id": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "uaa_client_secret": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "uaa_endpoint": {
          "$ref": "#/definitions/StringConfigItem"
        },
        "uaa_verify_cert": {
          "$ref": "#/definitions/BoolConfigItem"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ConfigurationsResponseScanAllPolicy": {
      "description": "ConfigurationsResponseScanAllPolicy configurations response scan all policy",
      "type": "object",
      "properties": {
        "parameter": {
          "$ref": "#/definitions/ConfigurationsResponseScanAllPolicyParameter"
        },
        "type": {
          "description": "The type of scan all policy, currently the valid values are \"none\" and \"daily\"",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ConfigurationsResponseScanAllPolicyParameter": {
      "type": "object",
      "title": "ConfigurationsResponseScanAllPolicyParameter The parameters of the policy, the values are dependent on the type of the policy.",
      "properties": {
        "daily_time": {
          "description": "The offset in seconds of UTC 0 o'clock, only valid when the policy type is \"daily\"",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DailyTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "CronJobParams": {
      "type": "object",
      "properties": {
        "cronExpression": {
          "type": "string",
          "x-go-name": "CronExpression"
        }
      },
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "Error": {
      "description": "Error a model for all the error response coming from harbor",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string",
          "x-go-name": "Code"
        },
        "message": {
          "description": "The error message",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Errors": {
      "description": "Errors The error array that describe the errors got during the handling of request",
      "type": "object",
      "properties": {
        "errors": {
          "description": "errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "x-go-name": "Errors"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "EventType": {
      "type": "string",
      "title": "EventType Webhook supportted event type.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ExecHistory": {
      "description": "ExecHistory exec history",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of purge job.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "deleted": {
          "description": "if purge job was deleted.",
          "type": "boolean",
          "x-go-name": "Deleted"
        },
        "id": {
          "description": "the id of purge job.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "job_kind": {
          "description": "the job kind of purge job.",
          "type": "string",
          "x-go-name": "JobKind"
        },
        "job_name": {
          "description": "the job name of purge job.",
          "type": "string",
          "x-go-name": "JobName"
        },
        "job_parameters": {
          "description": "the job parameters of purge job.",
          "type": "string",
          "x-go-name": "JobParameters"
        },
        "job_status": {
          "description": "the status of purge job.",
          "type": "string",
          "x-go-name": "JobStatus"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "update_time": {
          "description": "the update time of purge job.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Execution": {
      "description": "Execution execution",
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time of execution",
          "type": "string",
          "x-go-name": "EndTime"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of execution",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "metrics": {
          "$ref": "#/definitions/Metrics"
        },
        "start_time": {
          "description": "The start time of execution",
          "type": "string",
          "x-go-name": "StartTime"
        },
        "status": {
          "description": "The status of execution",
          "type": "string",
          "x-go-name": "Status"
        },
        "status_message": {
          "description": "The status message of execution",
          "type": "string",
          "x-go-name": "StatusMessage"
        },
        "trigger": {
          "description": "The trigger of execution",
          "type": "string",
          "x-go-name": "Trigger"
        },
        "vendor_id": {
          "description": "The vendor id of execution",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VendorID"
        },
        "vendor_type": {
          "description": "The vendor type of execution",
          "type": "string",
          "x-go-name": "VendorType"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ExtraAttrs": {
      "description": "ExtraAttrs extra attrs",
      "type": "object",
      "additionalProperties": {},
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "FilterStyle": {
      "description": "FilterStyle The style of the resource filter",
      "type": "object",
      "properties": {
        "style": {
          "description": "The filter style",
          "type": "string",
          "x-go-name": "Style"
        },
        "type": {
          "description": "The filter type",
          "type": "string",
          "x-go-name": "Type"
        },
        "values": {
          "description": "The filter values",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Values"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "GCHistory": {
      "description": "GCHistory GC history",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of gc job.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "deleted": {
          "description": "if gc job was deleted.",
          "type": "boolean",
          "x-go-name": "Deleted"
        },
        "id": {
          "description": "the id of gc job.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "job_kind": {
          "description": "the job kind of gc job.",
          "type": "string",
          "x-go-name": "JobKind"
        },
        "job_name": {
          "description": "the job name of gc job.",
          "type": "string",
          "x-go-name": "JobName"
        },
        "job_parameters": {
          "description": "the job parameters of gc job.",
          "type": "string",
          "x-go-name": "JobParameters"
        },
        "job_status": {
          "description": "the status of gc job.",
          "type": "string",
          "x-go-name": "JobStatus"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "update_time": {
          "description": "the update time of gc job.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "GeneralInfo": {
      "description": "GeneralInfo general info",
      "type": "object",
      "properties": {
        "auth_mode": {
          "description": "The auth mode of current Harbor instance.",
          "type": "string",
          "x-go-name": "AuthMode"
        },
        "authproxy_settings": {
          "$ref": "#/definitions/AuthproxySetting"
        },
        "current_time": {
          "description": "The current time of the server.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CurrentTime"
        },
        "external_url": {
          "description": "The external URL of Harbor, with protocol.",
          "type": "string",
          "x-go-name": "ExternalURL"
        },
        "harbor_version": {
          "description": "The build version of Harbor.",
          "type": "string",
          "x-go-name": "HarborVersion"
        },
        "has_ca_root": {
          "description": "Indicate whether there is a ca root cert file ready for download in the file system.",
          "type": "boolean",
          "x-go-name": "HasCaRoot"
        },
        "notification_enable": {
          "description": "The flag to indicate whether notification mechanism is enabled on Harbor instance.",
          "type": "boolean",
          "x-go-name": "NotificationEnable"
        },
        "project_creation_restriction": {
          "description": "Indicate who can create projects, it could be 'adminonly' or 'everyone'.",
          "type": "string",
          "x-go-name": "ProjectCreationRestriction"
        },
        "read_only": {
          "description": "The flag to indicate whether Harbor is in readonly mode.",
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "registry_storage_provider_name": {
          "description": "The storage provider's name of Harbor registry",
          "type": "string",
          "x-go-name": "RegistryStorageProviderName"
        },
        "registry_url": {
          "description": "The url of registry against which the docker command should be issued.",
          "type": "string",
          "x-go-name": "RegistryURL"
        },
        "self_registration": {
          "description": "Indicate whether the Harbor instance enable user to register himself.",
          "type": "boolean",
          "x-go-name": "SelfRegistration"
        },
        "with_chartmuseum": {
          "description": "If the Harbor instance is deployed with nested chartmuseum.",
          "type": "boolean",
          "x-go-name": "WithChartmuseum"
        },
        "with_notary": {
          "description": "If the Harbor instance is deployed with nested notary.",
          "type": "boolean",
          "x-go-name": "WithNotary"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Icon": {
      "description": "Icon icon",
      "type": "object",
      "properties": {
        "content": {
          "description": "The base64 encoded content of the icon",
          "type": "string",
          "x-go-name": "Content"
        },
        "content-type": {
          "description": "The content type of the icon",
          "type": "string",
          "x-go-name": "ContentType"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ImmutableRule": {
      "description": "ImmutableRule immutable rule",
      "type": "object",
      "properties": {
        "action": {
          "description": "action",
          "type": "string",
          "x-go-name": "Action"
        },
        "disabled": {
          "description": "disabled",
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "params": {
          "description": "params",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Params"
        },
        "priority": {
          "description": "priority",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Priority"
        },
        "scope_selectors": {
          "description": "scope selectors",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ImmutableSelector"
            }
          },
          "x-go-name": "ScopeSelectors"
        },
        "tag_selectors": {
          "description": "tag selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImmutableSelector"
          },
          "x-go-name": "TagSelectors"
        },
        "template": {
          "description": "template",
          "type": "string",
          "x-go-name": "Template"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ImmutableSelector": {
      "description": "ImmutableSelector immutable selector",
      "type": "object",
      "properties": {
        "decoration": {
          "description": "decoration",
          "type": "string",
          "x-go-name": "Decoration"
        },
        "extras": {
          "description": "extras",
          "type": "string",
          "x-go-name": "Extras"
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "x-go-name": "Kind"
        },
        "pattern": {
          "description": "pattern",
          "type": "string",
          "x-go-name": "Pattern"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Instance": {
      "description": "Instance instance",
      "type": "object",
      "properties": {
        "auth_info": {
          "description": "The auth credential data if exists",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "AuthInfo"
        },
        "auth_mode": {
          "description": "The authentication way supported",
          "type": "string",
          "x-go-name": "AuthMode"
        },
        "default": {
          "description": "Whether the instance is default or not",
          "type": "boolean",
          "x-go-name": "Default"
        },
        "description": {
          "description": "Description of instance",
          "type": "string",
          "x-go-name": "Description"
        },
        "enabled": {
          "description": "Whether the instance is activated or not",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "endpoint": {
          "description": "The service endpoint of this instance",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "id": {
          "description": "Unique ID",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "insecure": {
          "description": "Whether the instance endpoint is insecure or not",
          "type": "boolean",
          "x-go-name": "Insecure"
        },
        "name": {
          "description": "Instance name",
          "type": "string",
          "x-go-name": "Name"
        },
        "setup_timestamp": {
          "description": "The timestamp of instance setting up",
          "type": "integer",
          "format": "int64",
          "x-go-name": "SetupTimestamp"
        },
        "status": {
          "description": "The health status",
          "type": "string",
          "x-go-name": "Status"
        },
        "vendor": {
          "description": "Based on which driver, identified by ID",
          "type": "string",
          "x-go-name": "Vendor"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "IntegerConfigItem": {
      "description": "IntegerConfigItem integer config item",
      "type": "object",
      "properties": {
        "editable": {
          "description": "The configure item can be updated or not",
          "type": "boolean",
          "x-go-name": "Editable"
        },
        "value": {
          "description": "The integer value of current config item",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "InternalConfigurationValue": {
      "description": "InternalConfigurationValue internal configuration value",
      "type": "object",
      "properties": {
        "editable": {
          "description": "The configure item can be updated or not",
          "type": "boolean",
          "x-go-name": "Editable"
        },
        "value": {
          "description": "The value of current config item",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "InternalConfigurationsResponse": {
      "description": "InternalConfigurationsResponse internal configurations response",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/InternalConfigurationValue"
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "IsDefault": {
      "description": "IsDefault is default",
      "type": "object",
      "properties": {
        "is_default": {
          "description": "A flag indicating whether a scanner registration is default.",
          "type": "boolean",
          "x-go-name": "IsDefault"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "JobQueue": {
      "description": "JobQueue the job queue info",
      "type": "object",
      "properties": {
        "count": {
          "description": "The count of jobs in the job queue",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "job_type": {
          "description": "The type of the job queue",
          "type": "string",
          "x-go-name": "JobType"
        },
        "latency": {
          "description": "The latency the job queue (seconds)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Latency"
        },
        "paused": {
          "description": "The paused status of the job queue",
          "type": "boolean",
          "x-go-name": "Paused"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Label": {
      "description": "Label label",
      "type": "object",
      "properties": {
        "color": {
          "description": "The color the label",
          "type": "string",
          "x-go-name": "Color"
        },
        "creation_time": {
          "description": "The creation time the label\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "description": {
          "description": "The description the label",
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "The ID of the label",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "description": "The name the label",
          "type": "string",
          "x-go-name": "Name"
        },
        "project_id": {
          "description": "The ID of project that the label belongs to",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProjectID"
        },
        "scope": {
          "description": "The scope the label",
          "type": "string",
          "x-go-name": "Scope"
        },
        "update_time": {
          "description": "The update time of the label\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "LdapConf": {
      "description": "LdapConf The ldap configure properties",
      "type": "object",
      "properties": {
        "ldap_base_dn": {
          "description": "The base dn of ldap service.",
          "type": "string",
          "x-go-name": "LdapBaseDn"
        },
        "ldap_connection_timeout": {
          "description": "The connect timeout of ldap service(second).",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdapConnectionTimeout"
        },
        "ldap_filter": {
          "description": "The serach filter of ldap service.",
          "type": "string",
          "x-go-name": "LdapFilter"
        },
        "ldap_scope": {
          "description": "The serach scope of ldap service.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LdapScope"
        },
        "ldap_search_dn": {
          "description": "The search dn of ldap service.",
          "type": "string",
          "x-go-name": "LdapSearchDn"
        },
        "ldap_search_password": {
          "description": "The search password of ldap service.",
          "type": "string",
          "x-go-name": "LdapSearchPassword"
        },
        "ldap_uid": {
          "description": "The serach uid from ldap service attributes.",
          "type": "string",
          "x-go-name": "LdapUID"
        },
        "ldap_url": {
          "description": "The url of ldap service.",
          "type": "string",
          "x-go-name": "LdapURL"
        },
        "ldap_verify_cert": {
          "description": "Verify Ldap server certificate.",
          "type": "boolean",
          "x-go-name": "LdapVerifyCert"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "LdapFailedImportUser": {
      "description": "LdapFailedImportUser ldap failed import user",
      "type": "object",
      "properties": {
        "error": {
          "description": "fail reason.",
          "type": "string",
          "x-go-name": "Error"
        },
        "uid": {
          "description": "the uid can't add to system.",
          "type": "string",
          "x-go-name": "UID"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "LdapImportUsers": {
      "description": "LdapImportUsers ldap import users",
      "type": "object",
      "properties": {
        "ldap_uid_list": {
          "description": "selected uid list",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "LdapUIDList"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "LdapPingResult": {
      "description": "LdapPingResult The ldap ping result",
      "type": "object",
      "properties": {
        "message": {
          "description": "The ping operation output message.",
          "type": "string",
          "x-go-name": "Message"
        },
        "success": {
          "description": "Test success",
          "type": "boolean",
          "x-go-name": "Success"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "LdapUser": {
      "description": "LdapUser ldap user",
      "type": "object",
      "properties": {
        "email": {
          "description": "The user email address from \"mail\" or \"email\" attribute.",
          "type": "string",
          "x-go-name": "Email"
        },
        "realname": {
          "description": "The user realname from \"uid\" or \"cn\" attribute.",
          "type": "string",
          "x-go-name": "Realname"
        },
        "username": {
          "description": "ldap username.",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Metadata": {
      "description": "Metadata metadata",
      "type": "object",
      "properties": {
        "icon": {
          "description": "icon",
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "description": "id",
          "type": "string",
          "x-go-name": "ID"
        },
        "maintainers": {
          "description": "maintainers",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Maintainers"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "source": {
          "description": "source",
          "type": "string",
          "x-go-name": "Source"
        },
        "version": {
          "description": "version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Metrics": {
      "description": "Metrics metrics",
      "type": "object",
      "properties": {
        "error_task_count": {
          "description": "The count of error task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ErrorTaskCount"
        },
        "pending_task_count": {
          "description": "The count of pending task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PendingTaskCount"
        },
        "running_task_count": {
          "description": "The count of running task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RunningTaskCount"
        },
        "scheduled_task_count": {
          "description": "The count of scheduled task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ScheduledTaskCount"
        },
        "stopped_task_count": {
          "description": "The count of stopped task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StoppedTaskCount"
        },
        "success_task_count": {
          "description": "The count of success task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "SuccessTaskCount"
        },
        "task_count": {
          "description": "The count of task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TaskCount"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "NativeReportSummary": {
      "description": "NativeReportSummary The summary for the native report",
      "type": "object",
      "properties": {
        "complete_percent": {
          "description": "The complete percent of the scanning which value is between 0 and 100",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CompletePercent"
        },
        "duration": {
          "description": "The seconds spent for generating the report",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Duration"
        },
        "end_time": {
          "description": "The end time of the scan process that generating report\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndTime"
        },
        "report_id": {
          "description": "id of the native scan report",
          "type": "string",
          "x-go-name": "ReportID"
        },
        "scan_status": {
          "description": "The status of the report generating process",
          "type": "string",
          "x-go-name": "ScanStatus"
        },
        "scanner": {
          "$ref": "#/definitions/Scanner"
        },
        "severity": {
          "description": "The overall severity",
          "type": "string",
          "x-go-name": "Severity"
        },
        "start_time": {
          "description": "The start time of the scan process that generating report\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartTime"
        },
        "summary": {
          "$ref": "#/definitions/VulnerabilitySummary"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "NotifyType": {
      "type": "string",
      "title": "NotifyType Webhook supportted notify type.",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "OIDCCliSecretReq": {
      "description": "OIDCCliSecretReq OIDC cli secret req",
      "type": "object",
      "properties": {
        "secret": {
          "description": "The new secret",
          "type": "string",
          "x-go-name": "Secret"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "OIDCUserInfo": {
      "description": "OIDCUserInfo OIDC user info",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the OIDC user info record.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "id": {
          "description": "the ID of the OIDC info record",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "secret": {
          "description": "the secret of the OIDC user that can be used for CLI to push/pull artifacts",
          "type": "string",
          "x-go-name": "Secret"
        },
        "subiss": {
          "description": "the concatenation of sub and issuer in the ID token",
          "type": "string",
          "x-go-name": "Subiss"
        },
        "update_time": {
          "description": "The update time of the OIDC user info record.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        },
        "user_id": {
          "description": "the ID of the user",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "OperateRetentionExecutionBody": {
      "description": "OperateRetentionExecutionBody operate retention execution body",
      "type": "object",
      "properties": {
        "action": {
          "description": "action",
          "type": "string",
          "x-go-name": "Action"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/internal/api/client/retention"
    },
    "OverallHealthStatus": {
      "description": "OverallHealthStatus The system health status",
      "type": "object",
      "properties": {
        "components": {
          "description": "components",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentHealthStatus"
          },
          "x-go-name": "Components"
        },
        "status": {
          "description": "The overall health status. It is \"healthy\" only when all the components' status are \"healthy\"",
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "PRMergedEventMatch": {
      "type": "object",
      "properties": {
        "basePattern": {
          "type": "string",
          "x-go-name": "BasePattern"
        },
        "repo": {
          "type": "string",
          "x-go-name": "Repo"
        },
        "sourcePattern": {
          "type": "string",
          "x-go-name": "SourcePattern"
        }
      },
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "PRMergedJobParams": {
      "type": "object",
      "properties": {
        "prMergedEventMatchs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PRMergedEventMatch"
          },
          "x-go-name": "PRMergedEventMatchs"
        }
      },
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "PasswordReq": {
      "description": "PasswordReq password req",
      "type": "object",
      "properties": {
        "new_password": {
          "description": "New password for marking as to be updated.",
          "type": "string",
          "x-go-name": "NewPassword"
        },
        "old_password": {
          "description": "The user's existing password.",
          "type": "string",
          "x-go-name": "OldPassword"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Permission": {
      "description": "Permission permission",
      "type": "object",
      "properties": {
        "action": {
          "description": "The permission action",
          "type": "string",
          "x-go-name": "Action"
        },
        "resource": {
          "description": "The permission resoruce",
          "type": "string",
          "x-go-name": "Resource"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "PingOIDCBody": {
      "description": "PingOIDCBody ping OIDC body",
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL of OIDC endpoint to be tested.",
          "type": "string",
          "x-go-name": "URL"
        },
        "verify_cert": {
          "description": "Whether the certificate should be verified",
          "type": "boolean",
          "x-go-name": "VerifyCert"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/internal/api/client/oidc"
    },
    "Platform": {
      "description": "Platform platform",
      "type": "object",
      "properties": {
        "'os.features'": {
          "description": "The features of the OS that the artifact applys to",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OsFeatures"
        },
        "'os.version'": {
          "description": "The version of the OS that the artifact applys to",
          "type": "string",
          "x-go-name": "OsVersion"
        },
        "architecture": {
          "description": "The architecture that the artifact applys to",
          "type": "string",
          "x-go-name": "Architecture"
        },
        "os": {
          "description": "The OS that the artifact applys to",
          "type": "string",
          "x-go-name": "Os"
        },
        "variant": {
          "description": "The variant of the CPU",
          "type": "string",
          "x-go-name": "Variant"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "PluginInfo": {
      "description": "fatal error: stack overflow",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "imageTarget": {
          "type": "string",
          "x-go-name": "ImageTarget"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "pluginType": {
          "type": "string",
          "x-go-name": "PluginType"
        },
        "repo": {
          "type": "string",
          "x-go-name": "Repo"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/ipfs-force-community/brightbird/types"
    },
    "PluginParams": {
      "type": "object",
      "x-go-package": "github.com/ipfs-force-community/brightbird/types"
    },
    "PreheatPolicy": {
      "description": "PreheatPolicy preheat policy",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The Create Time of preheat policy\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "description": {
          "description": "The Description of preheat policy",
          "type": "string",
          "x-go-name": "Description"
        },
        "enabled": {
          "description": "Whether the preheat policy enabled",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "filters": {
          "description": "The Filters of preheat policy",
          "type": "string",
          "x-go-name": "Filters"
        },
        "id": {
          "description": "The ID of preheat policy",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "description": "The Name of preheat policy",
          "type": "string",
          "x-go-name": "Name"
        },
        "project_id": {
          "description": "The ID of preheat policy project",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProjectID"
        },
        "provider_id": {
          "description": "The ID of preheat policy provider",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProviderID"
        },
        "provider_name": {
          "description": "The Name of preheat policy provider",
          "type": "string",
          "x-go-name": "ProviderName"
        },
        "trigger": {
          "description": "The Trigger of preheat policy",
          "type": "string",
          "x-go-name": "Trigger"
        },
        "update_time": {
          "description": "The Update Time of preheat policy\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Project": {
      "description": "Project project",
      "type": "object",
      "properties": {
        "chart_count": {
          "description": "The total number of charts under this project.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ChartCount"
        },
        "creation_time": {
          "description": "The creation time of the project.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "current_user_role_id": {
          "description": "The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CurrentUserRoleID"
        },
        "current_user_role_ids": {
          "description": "The list of role ID of the current user who triggered the API (for UI)",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "x-go-name": "CurrentUserRoleIds"
        },
        "cve_allowlist": {
          "$ref": "#/definitions/CVEAllowlist"
        },
        "deleted": {
          "description": "A deletion mark of the project.",
          "type": "boolean",
          "x-go-name": "Deleted"
        },
        "metadata": {
          "$ref": "#/definitions/ProjectMetadata"
        },
        "name": {
          "description": "The name of the project.",
          "type": "string",
          "x-go-name": "Name"
        },
        "owner_id": {
          "description": "The owner ID of the project always means the creator of the project.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "OwnerID"
        },
        "owner_name": {
          "description": "The owner name of the project.",
          "type": "string",
          "x-go-name": "OwnerName"
        },
        "project_id": {
          "description": "Project ID",
          "type": "integer",
          "format": "int32",
          "x-go-name": "ProjectID"
        },
        "registry_id": {
          "description": "The ID of referenced registry when the project is a proxy cache project.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RegistryID"
        },
        "repo_count": {
          "description": "The number of the repositories under this project.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepoCount"
        },
        "togglable": {
          "description": "Correspond to the UI about whether the project's publicity is  updatable (for UI)",
          "type": "boolean",
          "x-go-name": "Togglable"
        },
        "update_time": {
          "description": "The update time of the project.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectDeletable": {
      "description": "ProjectDeletable project deletable",
      "type": "object",
      "properties": {
        "deletable": {
          "description": "Whether the project can be deleted.",
          "type": "boolean",
          "x-go-name": "Deletable"
        },
        "message": {
          "description": "The detail message when the project can not be deleted.",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectMember": {
      "description": "ProjectMember project member",
      "type": "object",
      "properties": {
        "member_group": {
          "$ref": "#/definitions/UserGroup"
        },
        "member_user": {
          "$ref": "#/definitions/UserEntity"
        },
        "role_id": {
          "description": "The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RoleID"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectMemberEntity": {
      "description": "ProjectMemberEntity project member entity",
      "type": "object",
      "properties": {
        "entity_id": {
          "description": "the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "EntityID"
        },
        "entity_name": {
          "description": "the name of the group member.",
          "type": "string",
          "x-go-name": "EntityName"
        },
        "entity_type": {
          "description": "the entity's type, u for user entity, g for group entity.",
          "type": "string",
          "x-go-name": "EntityType"
        },
        "id": {
          "description": "the project member id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "project_id": {
          "description": "the project id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProjectID"
        },
        "role_id": {
          "description": "the role id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RoleID"
        },
        "role_name": {
          "description": "the name of the role",
          "type": "string",
          "x-go-name": "RoleName"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectMetadata": {
      "description": "ProjectMetadata project metadata",
      "type": "object",
      "properties": {
        "auto_scan": {
          "description": "Whether scan images automatically when pushing. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-go-name": "AutoScan"
        },
        "enable_content_trust": {
          "description": "Whether content trust is enabled or not. If it is enabled, user can't pull unsigned images from this project. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-go-name": "EnableContentTrust"
        },
        "enable_content_trust_cosign": {
          "description": "Whether cosign content trust is enabled or not. If it is enabled, user can't pull images without cosign signature from this project. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-go-name": "EnableContentTrustCosign"
        },
        "prevent_vul": {
          "description": "Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-go-name": "PreventVul"
        },
        "public": {
          "description": "The public status of the project. The valid values are \"true\", \"false\".",
          "type": "string",
          "x-go-name": "Public"
        },
        "retention_id": {
          "description": "The ID of the tag retention policy for the project",
          "type": "string",
          "x-go-name": "RetentionID"
        },
        "reuse_sys_cve_allowlist": {
          "description": "Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.",
          "type": "string",
          "x-go-name": "ReuseSysCVEAllowlist"
        },
        "severity": {
          "description": "If the vulnerability is high than severity defined here, the images can't be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".",
          "type": "string",
          "x-go-name": "Severity"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectReq": {
      "description": "ProjectReq project req",
      "type": "object",
      "properties": {
        "cve_allowlist": {
          "$ref": "#/definitions/CVEAllowlist"
        },
        "metadata": {
          "$ref": "#/definitions/ProjectMetadata"
        },
        "project_name": {
          "description": "The name of the project.",
          "type": "string",
          "maxLength": 255,
          "x-go-name": "ProjectName"
        },
        "public": {
          "description": "deprecated, reserved for project creation in replication",
          "type": "boolean",
          "x-go-name": "Public"
        },
        "registry_id": {
          "description": "The ID of referenced registry when creating the proxy cache project",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RegistryID"
        },
        "storage_limit": {
          "description": "The storage quota of the project.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StorageLimit"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectScanner": {
      "description": "ProjectScanner project scanner",
      "type": "object",
      "required": [
        "uuid"
      ],
      "properties": {
        "uuid": {
          "description": "The identifier of the scanner registration",
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectSummary": {
      "description": "ProjectSummary project summary",
      "type": "object",
      "properties": {
        "chart_count": {
          "description": "The total number of charts under this project.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ChartCount"
        },
        "developer_count": {
          "description": "The total number of developer members.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeveloperCount"
        },
        "guest_count": {
          "description": "The total number of guest members.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "GuestCount"
        },
        "limited_guest_count": {
          "description": "The total number of limited guest members.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "LimitedGuestCount"
        },
        "maintainer_count": {
          "description": "The total number of maintainer members.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaintainerCount"
        },
        "project_admin_count": {
          "description": "The total number of project admin members.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProjectAdminCount"
        },
        "quota": {
          "$ref": "#/definitions/ProjectSummaryQuota"
        },
        "registry": {
          "$ref": "#/definitions/Registry"
        },
        "repo_count": {
          "description": "The number of the repositories under this project.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepoCount"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProjectSummaryQuota": {
      "description": "ProjectSummaryQuota project summary quota",
      "type": "object",
      "properties": {
        "hard": {
          "$ref": "#/definitions/ResourceList"
        },
        "used": {
          "$ref": "#/definitions/ResourceList"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ProviderUnderProject": {
      "description": "ProviderUnderProject provider under project",
      "type": "object",
      "properties": {
        "default": {
          "description": "default",
          "type": "boolean",
          "x-go-name": "Default"
        },
        "enabled": {
          "description": "enabled",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "provider": {
          "description": "provider",
          "type": "string",
          "x-go-name": "Provider"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Quota": {
      "description": "Quota The quota object",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of the quota\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "hard": {
          "$ref": "#/definitions/ResourceList"
        },
        "id": {
          "description": "ID of the quota",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "ref": {
          "$ref": "#/definitions/QuotaRefObject"
        },
        "update_time": {
          "description": "the update time of the quota\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        },
        "used": {
          "$ref": "#/definitions/ResourceList"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "QuotaRefObject": {
      "description": "QuotaRefObject quota ref object",
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "QuotaUpdateReq": {
      "description": "QuotaUpdateReq quota update req",
      "type": "object",
      "properties": {
        "hard": {
          "$ref": "#/definitions/ResourceList"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Reference": {
      "description": "Reference reference",
      "type": "object",
      "properties": {
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "child_digest": {
          "description": "The digest of the child artifact",
          "type": "string",
          "x-go-name": "ChildDigest"
        },
        "child_id": {
          "description": "The child ID of the reference",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ChildID"
        },
        "parent_id": {
          "description": "The parent ID of the reference",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ParentID"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        },
        "urls": {
          "description": "The download URLs",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Urls"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Registry": {
      "description": "Registry registry",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The create time of the policy.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "credential": {
          "$ref": "#/definitions/RegistryCredential"
        },
        "description": {
          "description": "Description of the registry.",
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "The registry ID.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean",
          "x-go-name": "Insecure"
        },
        "name": {
          "description": "The registry name.",
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "description": "Health status of the registry.",
          "type": "string",
          "x-go-name": "Status"
        },
        "type": {
          "description": "Type of the registry, e.g. 'harbor'.",
          "type": "string",
          "x-go-name": "Type"
        },
        "update_time": {
          "description": "The update time of the policy.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        },
        "url": {
          "description": "The registry URL string.",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryCredential": {
      "description": "RegistryCredential registry credential",
      "type": "object",
      "properties": {
        "access_key": {
          "description": "Access key, e.g. user name when credential type is 'basic'.",
          "type": "string",
          "x-go-name": "AccessKey"
        },
        "access_secret": {
          "description": "Access secret, e.g. password when credential type is 'basic'.",
          "type": "string",
          "x-go-name": "AccessSecret"
        },
        "type": {
          "description": "Credential type, such as 'basic', 'oauth'.",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryEndpoint": {
      "description": "RegistryEndpoint The style of the resource filter",
      "type": "object",
      "properties": {
        "key": {
          "description": "The endpoint key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "The endpoint value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryInfo": {
      "description": "RegistryInfo The registry info contains the base info and capability declarations of the registry",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description",
          "type": "string",
          "x-go-name": "Description"
        },
        "supported_copy_by_chunk": {
          "description": "The registry whether support copy by chunk.",
          "type": "boolean",
          "x-go-name": "SupportedCopyByChunk"
        },
        "supported_resource_filters": {
          "description": "The filters that the registry supports",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterStyle"
          },
          "x-go-name": "SupportedResourceFilters"
        },
        "supported_triggers": {
          "description": "The triggers that the registry supports",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SupportedTriggers"
        },
        "type": {
          "description": "The registry type",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryPing": {
      "description": "RegistryPing registry ping",
      "type": "object",
      "properties": {
        "access_key": {
          "description": "The registry access key.",
          "type": "string",
          "x-go-name": "AccessKey"
        },
        "access_secret": {
          "description": "The registry access secret.",
          "type": "string",
          "x-go-name": "AccessSecret"
        },
        "credential_type": {
          "description": "Credential type of the registry, e.g. 'basic'.",
          "type": "string",
          "x-go-name": "CredentialType"
        },
        "id": {
          "description": "The registry ID.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean",
          "x-go-name": "Insecure"
        },
        "type": {
          "description": "Type of the registry, e.g. 'harbor'.",
          "type": "string",
          "x-go-name": "Type"
        },
        "url": {
          "description": "The registry URL.",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryProviderCredentialPattern": {
      "description": "RegistryProviderCredentialPattern The registry credential pattern",
      "type": "object",
      "properties": {
        "access_key_data": {
          "description": "The access key data",
          "type": "string",
          "x-go-name": "AccessKeyData"
        },
        "access_key_type": {
          "description": "The access key type",
          "type": "string",
          "x-go-name": "AccessKeyType"
        },
        "access_secret_data": {
          "description": "The access secret data",
          "type": "string",
          "x-go-name": "AccessSecretData"
        },
        "access_secret_type": {
          "description": "The access secret type",
          "type": "string",
          "x-go-name": "AccessSecretType"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryProviderEndpointPattern": {
      "description": "RegistryProviderEndpointPattern The registry endpoint pattern",
      "type": "object",
      "properties": {
        "endpoint_type": {
          "description": "The endpoint type",
          "type": "string",
          "x-go-name": "EndpointType"
        },
        "endpoints": {
          "description": "The endpoint list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegistryEndpoint"
          },
          "x-go-name": "Endpoints"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryProviderInfo": {
      "description": "RegistryProviderInfo The registry provider info contains the base info and capability declarations of the registry provider",
      "type": "object",
      "properties": {
        "credential_pattern": {
          "$ref": "#/definitions/RegistryProviderCredentialPattern"
        },
        "endpoint_pattern": {
          "$ref": "#/definitions/RegistryProviderEndpointPattern"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RegistryUpdate": {
      "description": "RegistryUpdate registry update",
      "type": "object",
      "properties": {
        "access_key": {
          "description": "The registry access key.",
          "type": "string",
          "x-go-name": "AccessKey"
        },
        "access_secret": {
          "description": "The registry access secret.",
          "type": "string",
          "x-go-name": "AccessSecret"
        },
        "credential_type": {
          "description": "Credential type of the registry, e.g. 'basic'.",
          "type": "string",
          "x-go-name": "CredentialType"
        },
        "description": {
          "description": "Description of the registry.",
          "type": "string",
          "x-go-name": "Description"
        },
        "insecure": {
          "description": "Whether or not the certificate will be verified when Harbor tries to access the server.",
          "type": "boolean",
          "x-go-name": "Insecure"
        },
        "name": {
          "description": "The registry name.",
          "type": "string",
          "x-go-name": "Name"
        },
        "url": {
          "description": "The registry URL.",
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationExecution": {
      "description": "ReplicationExecution The replication execution",
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndTime"
        },
        "failed": {
          "description": "The count of failed executions",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Failed"
        },
        "id": {
          "description": "The ID of the execution",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "in_progress": {
          "description": "The count of in_progress executions",
          "type": "integer",
          "format": "int64",
          "x-go-name": "InProgress"
        },
        "policy_id": {
          "description": "The ID if the policy that the execution belongs to",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PolicyID"
        },
        "start_time": {
          "description": "The start time\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartTime"
        },
        "status": {
          "description": "The status of the execution",
          "type": "string",
          "x-go-name": "Status"
        },
        "status_text": {
          "description": "The status text",
          "type": "string",
          "x-go-name": "StatusText"
        },
        "stopped": {
          "description": "The count of stopped executions",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Stopped"
        },
        "succeed": {
          "description": "The count of succeed executions",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Succeed"
        },
        "total": {
          "description": "The total count of all executions",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        },
        "trigger": {
          "description": "The trigger mode",
          "type": "string",
          "x-go-name": "Trigger"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationFilter": {
      "description": "ReplicationFilter replication filter",
      "type": "object",
      "properties": {
        "decoration": {
          "description": "matches or excludes the result",
          "type": "string",
          "x-go-name": "Decoration"
        },
        "type": {
          "description": "The replication policy filter type.",
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "description": "The value of replication policy filter.",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationPolicy": {
      "description": "ReplicationPolicy replication policy",
      "type": "object",
      "properties": {
        "copy_by_chunk": {
          "description": "Whether to enable copy by chunk.",
          "type": "boolean",
          "x-go-name": "CopyByChunk"
        },
        "creation_time": {
          "description": "The create time of the policy.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "deletion": {
          "description": "Deprecated, use \"replicate_deletion\" instead. Whether to replicate the deletion operation.",
          "type": "boolean",
          "x-go-name": "Deletion"
        },
        "description": {
          "description": "The description of the policy.",
          "type": "string",
          "x-go-name": "Description"
        },
        "dest_namespace": {
          "description": "The destination namespace.",
          "type": "string",
          "x-go-name": "DestNamespace"
        },
        "dest_namespace_replace_count": {
          "description": "Specify how many path components will be replaced by the provided destination namespace.\nThe default value is -1 in which case the legacy mode will be applied.",
          "type": "integer",
          "format": "int8",
          "x-go-name": "DestNamespaceReplaceCount"
        },
        "dest_registry": {
          "$ref": "#/definitions/Registry"
        },
        "enabled": {
          "description": "Whether the policy is enabled or not.",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "filters": {
          "description": "The replication policy filter array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReplicationFilter"
          },
          "x-go-name": "Filters"
        },
        "id": {
          "description": "The policy ID.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "description": "The policy name.",
          "type": "string",
          "x-go-name": "Name"
        },
        "override": {
          "description": "Whether to override the resources on the destination registry.",
          "type": "boolean",
          "x-go-name": "Override"
        },
        "replicate_deletion": {
          "description": "Whether to replicate the deletion operation.",
          "type": "boolean",
          "x-go-name": "ReplicateDeletion"
        },
        "speed": {
          "description": "speed limit for each task",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Speed"
        },
        "src_registry": {
          "$ref": "#/definitions/Registry"
        },
        "trigger": {
          "$ref": "#/definitions/ReplicationTrigger"
        },
        "update_time": {
          "description": "The update time of the policy.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationTask": {
      "description": "ReplicationTask The replication task",
      "type": "object",
      "properties": {
        "dst_resource": {
          "description": "The destination resource that the task operates",
          "type": "string",
          "x-go-name": "DstResource"
        },
        "end_time": {
          "description": "The end time of the task\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndTime"
        },
        "execution_id": {
          "description": "The ID of the execution that the task belongs to",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExecutionID"
        },
        "id": {
          "description": "The ID of the task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "job_id": {
          "description": "The ID of the underlying job that the task related to",
          "type": "string",
          "x-go-name": "JobID"
        },
        "operation": {
          "description": "The operation of the task",
          "type": "string",
          "x-go-name": "Operation"
        },
        "resource_type": {
          "description": "The type of the resource that the task operates",
          "type": "string",
          "x-go-name": "ResourceType"
        },
        "src_resource": {
          "description": "The source resource that the task operates",
          "type": "string",
          "x-go-name": "SrcResource"
        },
        "start_time": {
          "description": "The start time of the task\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartTime"
        },
        "status": {
          "description": "The status of the task",
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationTrigger": {
      "description": "ReplicationTrigger replication trigger",
      "type": "object",
      "properties": {
        "trigger_settings": {
          "$ref": "#/definitions/ReplicationTriggerSettings"
        },
        "type": {
          "description": "The replication policy trigger type. The valid values are manual, event_based and scheduled.",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ReplicationTriggerSettings": {
      "description": "ReplicationTriggerSettings replication trigger settings",
      "type": "object",
      "properties": {
        "cron": {
          "description": "The cron string for scheduled trigger",
          "type": "string",
          "x-go-name": "Cron"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Repository": {
      "description": "Repository repository",
      "type": "object",
      "properties": {
        "artifact_count": {
          "description": "The count of the artifacts inside the repository",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArtifactCount"
        },
        "creation_time": {
          "description": "The creation time of the repository\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "description": {
          "description": "The description of the repository",
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "description": "The ID of the repository",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "description": "The name of the repository",
          "type": "string",
          "x-go-name": "Name"
        },
        "project_id": {
          "description": "The ID of the project that the repository belongs to",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProjectID"
        },
        "pull_count": {
          "description": "The count that the artifact inside the repository pulled",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PullCount"
        },
        "update_time": {
          "description": "The update time of the repository\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ResourceList": {
      "description": "ResourceList resource list",
      "type": "object",
      "additionalProperties": {
        "type": "integer",
        "format": "int64"
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionExecution": {
      "description": "RetentionExecution retention execution",
      "type": "object",
      "properties": {
        "dry_run": {
          "description": "dry run",
          "type": "boolean",
          "x-go-name": "DryRun"
        },
        "end_time": {
          "description": "end time",
          "type": "string",
          "x-go-name": "EndTime"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "policy_id": {
          "description": "policy id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PolicyID"
        },
        "start_time": {
          "description": "start time",
          "type": "string",
          "x-go-name": "StartTime"
        },
        "status": {
          "description": "status",
          "type": "string",
          "x-go-name": "Status"
        },
        "trigger": {
          "description": "trigger",
          "type": "string",
          "x-go-name": "Trigger"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionExecutionTask": {
      "description": "RetentionExecutionTask retention execution task",
      "type": "object",
      "properties": {
        "end_time": {
          "description": "end time",
          "type": "string",
          "x-go-name": "EndTime"
        },
        "execution_id": {
          "description": "execution id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExecutionID"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "job_id": {
          "description": "job id",
          "type": "string",
          "x-go-name": "JobID"
        },
        "repository": {
          "description": "repository",
          "type": "string",
          "x-go-name": "Repository"
        },
        "retained": {
          "description": "retained",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Retained"
        },
        "start_time": {
          "description": "start time",
          "type": "string",
          "x-go-name": "StartTime"
        },
        "status": {
          "description": "status",
          "type": "string",
          "x-go-name": "Status"
        },
        "status_code": {
          "description": "status code",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusCode"
        },
        "status_revision": {
          "description": "status revision",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusRevision"
        },
        "total": {
          "description": "total",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionMetadata": {
      "description": "RetentionMetadata the tag retention metadata",
      "type": "object",
      "properties": {
        "scope_selectors": {
          "description": "supported scope selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelectorMetadata"
          },
          "x-go-name": "ScopeSelectors"
        },
        "tag_selectors": {
          "description": "supported tag selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelectorMetadata"
          },
          "x-go-name": "TagSelectors"
        },
        "templates": {
          "description": "templates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRuleMetadata"
          },
          "x-go-name": "Templates"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionPolicy": {
      "description": "RetentionPolicy retention policy",
      "type": "object",
      "properties": {
        "algorithm": {
          "description": "algorithm",
          "type": "string",
          "x-go-name": "Algorithm"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "rules": {
          "description": "rules",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRule"
          },
          "x-go-name": "Rules"
        },
        "scope": {
          "$ref": "#/definitions/RetentionPolicyScope"
        },
        "trigger": {
          "$ref": "#/definitions/RetentionRuleTrigger"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionPolicyScope": {
      "description": "RetentionPolicyScope retention policy scope",
      "type": "object",
      "properties": {
        "level": {
          "description": "level",
          "type": "string",
          "x-go-name": "Level"
        },
        "ref": {
          "description": "ref",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Ref"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionRule": {
      "description": "RetentionRule retention rule",
      "type": "object",
      "properties": {
        "action": {
          "description": "action",
          "type": "string",
          "x-go-name": "Action"
        },
        "disabled": {
          "description": "disabled",
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "params": {
          "description": "params",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Params"
        },
        "priority": {
          "description": "priority",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Priority"
        },
        "scope_selectors": {
          "description": "scope selectors",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RetentionSelector"
            }
          },
          "x-go-name": "ScopeSelectors"
        },
        "tag_selectors": {
          "description": "tag selectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionSelector"
          },
          "x-go-name": "TagSelectors"
        },
        "template": {
          "description": "template",
          "type": "string",
          "x-go-name": "Template"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionRuleMetadata": {
      "description": "RetentionRuleMetadata the tag retention rule metadata",
      "type": "object",
      "properties": {
        "action": {
          "description": "rule action",
          "type": "string",
          "x-go-name": "Action"
        },
        "display_text": {
          "description": "rule display text",
          "type": "string",
          "x-go-name": "DisplayText"
        },
        "params": {
          "description": "rule params",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionRuleParamMetadata"
          },
          "x-go-name": "Params"
        },
        "rule_template": {
          "description": "rule id",
          "type": "string",
          "x-go-name": "RuleTemplate"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionRuleParamMetadata": {
      "description": "RetentionRuleParamMetadata rule param",
      "type": "object",
      "properties": {
        "required": {
          "description": "required",
          "type": "boolean",
          "x-go-name": "Required"
        },
        "type": {
          "description": "type",
          "type": "string",
          "x-go-name": "Type"
        },
        "unit": {
          "description": "unit",
          "type": "string",
          "x-go-name": "Unit"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionRuleTrigger": {
      "description": "RetentionRuleTrigger retention rule trigger",
      "type": "object",
      "properties": {
        "kind": {
          "description": "kind",
          "type": "string",
          "x-go-name": "Kind"
        },
        "references": {
          "description": "references",
          "x-go-name": "References"
        },
        "settings": {
          "description": "settings",
          "x-go-name": "Settings"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionSelector": {
      "description": "RetentionSelector retention selector",
      "type": "object",
      "properties": {
        "decoration": {
          "description": "decoration",
          "type": "string",
          "x-go-name": "Decoration"
        },
        "extras": {
          "description": "extras",
          "type": "string",
          "x-go-name": "Extras"
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "x-go-name": "Kind"
        },
        "pattern": {
          "description": "pattern",
          "type": "string",
          "x-go-name": "Pattern"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RetentionSelectorMetadata": {
      "description": "RetentionSelectorMetadata retention selector",
      "type": "object",
      "properties": {
        "decorations": {
          "description": "decorations",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Decorations"
        },
        "display_text": {
          "description": "display text",
          "type": "string",
          "x-go-name": "DisplayText"
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "x-go-name": "Kind"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Robot": {
      "description": "Robot robot",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of the robot.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "description": {
          "description": "The description of the robot",
          "type": "string",
          "x-go-name": "Description"
        },
        "disable": {
          "description": "The disable status of the robot",
          "type": "boolean",
          "x-go-name": "Disable"
        },
        "duration": {
          "description": "The duration of the robot in days",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Duration"
        },
        "editable": {
          "description": "The editable status of the robot",
          "type": "boolean",
          "x-go-name": "Editable"
        },
        "expires_at": {
          "description": "The expiration data of the robot",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresAt"
        },
        "id": {
          "description": "The ID of the robot",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "level": {
          "description": "The level of the robot, project or system",
          "type": "string",
          "x-go-name": "Level"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string",
          "x-go-name": "Name"
        },
        "permissions": {
          "description": "permissions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotPermission"
          },
          "x-go-name": "Permissions"
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string",
          "x-go-name": "Secret"
        },
        "update_time": {
          "description": "The update time of the robot.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RobotCreate": {
      "type": "object",
      "title": "RobotCreate The request for robot account creation.",
      "properties": {
        "description": {
          "description": "The description of the robot",
          "type": "string",
          "x-go-name": "Description"
        },
        "disable": {
          "description": "The disable status of the robot",
          "type": "boolean",
          "x-go-name": "Disable"
        },
        "duration": {
          "description": "The duration of the robot in days",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Duration"
        },
        "level": {
          "description": "The level of the robot, project or system",
          "type": "string",
          "x-go-name": "Level"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string",
          "x-go-name": "Name"
        },
        "permissions": {
          "description": "permissions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotPermission"
          },
          "x-go-name": "Permissions"
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string",
          "x-go-name": "Secret"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RobotCreateV1": {
      "description": "RobotCreateV1 robot create v1",
      "type": "object",
      "properties": {
        "access": {
          "description": "The permission of robot account",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Access"
          },
          "x-go-name": "Access"
        },
        "description": {
          "description": "The description of robot account",
          "type": "string",
          "x-go-name": "Description"
        },
        "expires_at": {
          "description": "The expiration time on or after which the JWT MUST NOT be accepted for processing.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresAt"
        },
        "name": {
          "description": "The name of robot account",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RobotCreated": {
      "type": "object",
      "title": "RobotCreated The response for robot account creation.",
      "properties": {
        "creation_time": {
          "description": "The creation time of the robot.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "expires_at": {
          "description": "The expiration data of the robot",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresAt"
        },
        "id": {
          "description": "The ID of the robot",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string",
          "x-go-name": "Name"
        },
        "secret": {
          "description": "The secret of the robot",
          "type": "string",
          "x-go-name": "Secret"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RobotPermission": {
      "description": "RobotPermission robot permission",
      "type": "object",
      "properties": {
        "access": {
          "description": "access",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Access"
          },
          "x-go-name": "Access"
        },
        "kind": {
          "description": "The kind of the permission",
          "type": "string",
          "x-go-name": "Kind"
        },
        "namespace": {
          "description": "The namespace of the permission",
          "type": "string",
          "x-go-name": "Namespace"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RobotSec": {
      "type": "object",
      "title": "RobotSec The response for refresh/update robot account secret.",
      "properties": {
        "secret": {
          "description": "The secret of the robot",
          "type": "string",
          "x-go-name": "Secret"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "RoleRequest": {
      "description": "RoleRequest role request",
      "type": "object",
      "properties": {
        "role_id": {
          "description": "The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RoleID"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScanDataExportExecution": {
      "description": "ScanDataExportExecution The replication execution",
      "type": "object",
      "properties": {
        "end_time": {
          "description": "The end time\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndTime"
        },
        "file_present": {
          "description": "Indicates whether the export artifact is present in registry",
          "type": "boolean",
          "x-go-name": "FilePresent"
        },
        "id": {
          "description": "The ID of the execution",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "start_time": {
          "description": "The start time\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartTime"
        },
        "status": {
          "description": "The status of the execution",
          "type": "string",
          "x-go-name": "Status"
        },
        "status_text": {
          "description": "The status text",
          "type": "string",
          "x-go-name": "StatusText"
        },
        "trigger": {
          "description": "The trigger mode",
          "type": "string",
          "x-go-name": "Trigger"
        },
        "user_id": {
          "description": "The ID if the user triggering the export job",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        },
        "user_name": {
          "description": "The name of the user triggering the job",
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScanDataExportExecutionList": {
      "description": "ScanDataExportExecutionList The list of scan data export executions",
      "type": "object",
      "properties": {
        "items": {
          "description": "The list of scan data export executions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScanDataExportExecution"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScanDataExportJob": {
      "description": "ScanDataExportJob The metadata associated with the scan data export job",
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the scan data export job",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScanDataExportRequest": {
      "type": "object",
      "title": "ScanDataExportRequest The criteria to select the scan data to export.",
      "properties": {
        "cveIds": {
          "description": "CVE-IDs for which to export data. Multiple CVE-IDs can be specified by separating using ',' and enclosed between '{}'. Defaults to all if empty",
          "type": "string",
          "x-go-name": "CVEIds"
        },
        "job_name": {
          "description": "Name of the scan data export job",
          "type": "string",
          "x-go-name": "JobName"
        },
        "labels": {
          "description": "A list of one or more labels for which to export the scan data, defaults to all if empty",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Labels"
        },
        "projects": {
          "description": "A list of one or more projects for which to export the scan data, currently only one project is supported due to performance concerns, but define as array for extension in the future.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Projects"
        },
        "repositories": {
          "description": "A list of repositories for which to export the scan data, defaults to all if empty",
          "type": "string",
          "x-go-name": "Repositories"
        },
        "tags": {
          "description": "A list of tags enclosed within '{}'. Defaults to all if empty",
          "type": "string",
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScanOverview": {
      "description": "ScanOverview The scan overview attached in the metadata of tag",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/NativeReportSummary"
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Scanner": {
      "description": "Scanner scanner",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the scanner",
          "type": "string",
          "x-go-name": "Name"
        },
        "vendor": {
          "description": "Name of the scanner provider",
          "type": "string",
          "x-go-name": "Vendor"
        },
        "version": {
          "description": "Version of the scanner adapter",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScannerAdapterMetadata": {
      "description": "ScannerAdapterMetadata The metadata info of the scanner adapter",
      "type": "object",
      "properties": {
        "capabilities": {
          "description": "capabilities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScannerCapability"
          },
          "x-go-name": "Capabilities"
        },
        "properties": {
          "description": "properties",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Properties"
        },
        "scanner": {
          "$ref": "#/definitions/Scanner"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScannerCapability": {
      "description": "ScannerCapability scanner capability",
      "type": "object",
      "properties": {
        "consumes_mime_types": {
          "description": "consumes mime types",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ConsumesMimeTypes"
        },
        "produces_mime_types": {
          "description": "produces mime types",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ProducesMimeTypes"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScannerRegistration": {
      "type": "object",
      "title": "ScannerRegistration Registration represents a named configuration for invoking a scanner via its adapter.",
      "properties": {
        "access_credential": {
          "description": "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.",
          "type": "string",
          "x-go-name": "AccessCredential"
        },
        "adapter": {
          "description": "Optional property to describe the name of the scanner registration",
          "type": "string",
          "x-go-name": "Adapter"
        },
        "auth": {
          "description": "Specify what authentication approach is adopted for the HTTP communications.\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"",
          "type": "string",
          "x-go-name": "Auth"
        },
        "create_time": {
          "description": "The creation time of this registration\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateTime"
        },
        "description": {
          "description": "An optional description of this registration.",
          "type": "string",
          "x-go-name": "Description"
        },
        "disabled": {
          "description": "Indicate whether the registration is enabled or not",
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "health": {
          "description": "Indicate the healthy of the registration",
          "type": "string",
          "x-go-name": "Health"
        },
        "is_default": {
          "description": "Indicate if the registration is set as the system default one",
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "description": "The name of this registration.",
          "type": "string",
          "x-go-name": "Name"
        },
        "skip_certVerify": {
          "description": "Indicate if skip the certificate verification when sending HTTP requests",
          "type": "boolean",
          "x-go-name": "SkipCertVerify"
        },
        "update_time": {
          "description": "The update time of this registration\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        },
        "url": {
          "description": "A base URL of the scanner adapter",
          "type": "string",
          "x-go-name": "URL"
        },
        "use_internal_addr": {
          "description": "Indicate whether use internal registry addr for the scanner to pull content or not",
          "type": "boolean",
          "x-go-name": "UseInternalAddr"
        },
        "uuid": {
          "description": "The unique identifier of this registration.",
          "type": "string",
          "x-go-name": "UUID"
        },
        "vendor": {
          "description": "Optional property to describe the vendor of the scanner registration",
          "type": "string",
          "x-go-name": "Vendor"
        },
        "version": {
          "description": "Optional property to describe the version of the scanner registration",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScannerRegistrationReq": {
      "description": "ScannerRegistrationReq scanner registration req",
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "access_credential": {
          "description": "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.",
          "type": "string",
          "x-go-name": "AccessCredential"
        },
        "auth": {
          "description": "Specify what authentication approach is adopted for the HTTP communications.\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"",
          "type": "string",
          "x-go-name": "Auth"
        },
        "description": {
          "description": "An optional description of this registration.",
          "type": "string",
          "x-go-name": "Description"
        },
        "disabled": {
          "description": "Indicate whether the registration is enabled or not",
          "type": "boolean",
          "x-go-name": "Disabled"
        },
        "name": {
          "description": "The name of this registration",
          "type": "string",
          "x-go-name": "Name"
        },
        "skip_certVerify": {
          "description": "Indicate if skip the certificate verification when sending HTTP requests",
          "type": "boolean",
          "x-go-name": "SkipCertVerify"
        },
        "url": {
          "description": "A base URL of the scanner adapter.",
          "type": "string",
          "format": "uri",
          "x-go-name": "URL"
        },
        "use_internal_addr": {
          "description": "Indicate whether use internal registry addr for the scanner to pull content or not",
          "type": "boolean",
          "x-go-name": "UseInternalAddr"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScannerRegistrationSettings": {
      "description": "ScannerRegistrationSettings scanner registration settings",
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "access_credential": {
          "description": "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.",
          "type": "string",
          "x-go-name": "AccessCredential"
        },
        "auth": {
          "description": "Specify what authentication approach is adopted for the HTTP communications.\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"",
          "type": "string",
          "x-go-name": "Auth"
        },
        "name": {
          "description": "The name of this registration",
          "type": "string",
          "x-go-name": "Name"
        },
        "url": {
          "description": "A base URL of the scanner adapter.",
          "type": "string",
          "format": "uri",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Schedule": {
      "description": "Schedule schedule",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "the creation time of the schedule.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime",
          "readOnly": true
        },
        "id": {
          "description": "The id of the schedule.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "readOnly": true
        },
        "parameters": {
          "description": "The parameters of schedule job",
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Parameters"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleObj"
        },
        "status": {
          "description": "The status of the schedule.",
          "type": "string",
          "x-go-name": "Status",
          "readOnly": true
        },
        "update_time": {
          "description": "the update time of the schedule.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime",
          "readOnly": true
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScheduleObj": {
      "description": "ScheduleObj schedule obj",
      "type": "object",
      "properties": {
        "cron": {
          "description": "A cron expression, a time-based job scheduler.",
          "type": "string",
          "x-go-name": "Cron"
        },
        "next_scheduled_time": {
          "description": "The next time to schedule to run the job.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "NextScheduledTime"
        },
        "type": {
          "description": "The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'.\n'Manual' means to trigger it right away and 'None' means to cancel the schedule.",
          "type": "string",
          "enum": [
            "[Hourly Daily Weekly Custom Manual None]"
          ],
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "ScheduleTask": {
      "description": "ScheduleTask the schedule task info",
      "type": "object",
      "properties": {
        "cron": {
          "description": "the cron of the current schedule task",
          "type": "string",
          "x-go-name": "Cron"
        },
        "id": {
          "description": "the id of the Schedule task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "update_time": {
          "description": "the update time of the schedule task\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        },
        "vendor_id": {
          "description": "the vendor id of the current task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "VendorID"
        },
        "vendor_type": {
          "description": "the vendor type of the current schedule task",
          "type": "string",
          "x-go-name": "VendorType"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "SchedulerStatus": {
      "description": "SchedulerStatus the scheduler status",
      "type": "object",
      "properties": {
        "paused": {
          "description": "if the scheduler is paused",
          "type": "boolean",
          "x-go-name": "Paused"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Search": {
      "description": "Search search",
      "type": "object",
      "properties": {
        "chart": {
          "description": "Search results of the charts that macthed the filter keywords.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResult"
          },
          "x-go-name": "Chart"
        },
        "project": {
          "description": "Search results of the projects that matched the filter keywords.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          },
          "x-go-name": "Project"
        },
        "repository": {
          "description": "Search results of the repositories that matched the filter keywords.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchRepository"
          },
          "x-go-name": "Repository"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "SearchRepository": {
      "description": "SearchRepository search repository",
      "type": "object",
      "properties": {
        "artifact_count": {
          "description": "The count of artifacts in the repository",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArtifactCount"
        },
        "project_id": {
          "description": "The ID of the project that the repository belongs to",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProjectID"
        },
        "project_name": {
          "description": "The name of the project that the repository belongs to",
          "type": "string",
          "x-go-name": "ProjectName"
        },
        "project_public": {
          "description": "The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)",
          "type": "boolean",
          "x-go-name": "ProjectPublic"
        },
        "pull_count": {
          "description": "The count how many times the repository is pulled",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PullCount"
        },
        "repository_name": {
          "description": "The name of the repository",
          "type": "string",
          "x-go-name": "RepositoryName"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "SearchResult": {
      "description": "SearchResult The chart search result item",
      "type": "object",
      "properties": {
        "Chart": {
          "$ref": "#/definitions/ChartVersion"
        },
        "Name": {
          "description": "The chart name with repo name",
          "type": "string"
        },
        "Score": {
          "description": "The matched level",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "StartReplicationExecution": {
      "description": "StartReplicationExecution start replication execution",
      "type": "object",
      "properties": {
        "policy_id": {
          "description": "The ID of policy that the execution belongs to.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PolicyID"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Statistic": {
      "description": "Statistic statistic",
      "type": "object",
      "properties": {
        "private_project_count": {
          "description": "The count of the private projects",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrivateProjectCount"
        },
        "private_repo_count": {
          "description": "The count of the private repositories",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PrivateRepoCount"
        },
        "public_project_count": {
          "description": "The count of the public projects",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PublicProjectCount"
        },
        "public_repo_count": {
          "description": "The count of the public repositories",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PublicRepoCount"
        },
        "total_project_count": {
          "description": "The count of the total projects, only be seen by the system admin",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalProjectCount"
        },
        "total_repo_count": {
          "description": "The count of the total repositories, only be seen by the system admin",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalRepoCount"
        },
        "total_storage_consumption": {
          "description": "The total storage consumption of blobs, only be seen by the system admin",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalStorageConsumption"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Stats": {
      "type": "object",
      "title": "Stats Stats provides the overall progress of the scan all process.",
      "properties": {
        "completed": {
          "description": "The number of the finished scan processes triggered by the scan all action",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Completed"
        },
        "metrics": {
          "description": "The metrics data for the each status",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Metrics"
        },
        "ongoing": {
          "description": "A flag indicating job status of scan all.",
          "type": "boolean",
          "x-go-name": "Ongoing"
        },
        "total": {
          "description": "The total number of scan processes triggered by the scan all action",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        },
        "trigger": {
          "description": "The trigger of the scan all job.",
          "type": "string",
          "enum": [
            "[Manual Schedule Event]"
          ],
          "x-go-name": "Trigger"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "StepState": {
      "type": "string",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "Storage": {
      "description": "Storage storage",
      "type": "object",
      "properties": {
        "free": {
          "description": "Free volume size.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Free"
        },
        "total": {
          "description": "Total volume size.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "StringConfigItem": {
      "description": "StringConfigItem string config item",
      "type": "object",
      "properties": {
        "editable": {
          "description": "The configure item can be updated or not",
          "type": "boolean",
          "x-go-name": "Editable"
        },
        "value": {
          "description": "The string value of current config item",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "SupportedWebhookEventTypes": {
      "type": "object",
      "title": "SupportedWebhookEventTypes Supportted webhook event types and notify types.",
      "properties": {
        "event_type": {
          "description": "event type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventType"
          },
          "x-go-name": "EventType"
        },
        "notify_type": {
          "description": "notify type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotifyType"
          },
          "x-go-name": "NotifyType"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "SystemInfo": {
      "description": "SystemInfo system info",
      "type": "object",
      "properties": {
        "storage": {
          "description": "The storage of system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Storage"
          },
          "x-go-name": "Storage"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Tag": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "artifact_id": {
          "description": "The ID of the artifact that the tag attached to",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArtifactID"
        },
        "id": {
          "description": "The ID of the tag",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "immutable": {
          "description": "The immutable status of the tag",
          "type": "boolean",
          "x-go-name": "Immutable"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string",
          "x-go-name": "Name"
        },
        "pull_time": {
          "description": "The latest pull time of the tag\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "PullTime"
        },
        "push_time": {
          "description": "The push time of the tag\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "PushTime"
        },
        "repository_id": {
          "description": "The ID of the repository that the tag belongs to",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RepositoryID"
        },
        "signed": {
          "description": "The attribute indicates whether the tag is signed or not",
          "type": "boolean",
          "x-go-name": "Signed"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "TagCreateEventMatch": {
      "type": "object",
      "properties": {
        "repo": {
          "type": "string",
          "x-go-name": "Repo"
        },
        "tagPattern": {
          "type": "string",
          "x-go-name": "TagPattern"
        }
      },
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "TagCreateJobParams": {
      "type": "object",
      "properties": {
        "tagCreateEventMatchs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagCreateEventMatch"
          },
          "x-go-name": "TagCreateEventMatchs"
        }
      },
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "Task": {
      "description": "Task task",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The creation time of task",
          "type": "string",
          "x-go-name": "CreationTime"
        },
        "end_time": {
          "description": "The end time of task",
          "type": "string",
          "x-go-name": "EndTime"
        },
        "execution_id": {
          "description": "The ID of task execution",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExecutionID"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of task",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "run_count": {
          "description": "The count of task run",
          "type": "integer",
          "format": "int32",
          "x-go-name": "RunCount"
        },
        "start_time": {
          "description": "The start time of task",
          "type": "string",
          "x-go-name": "StartTime"
        },
        "status": {
          "description": "The status of task",
          "type": "string",
          "x-go-name": "Status"
        },
        "status_message": {
          "description": "The status message of task",
          "type": "string",
          "x-go-name": "StatusMessage"
        },
        "update_time": {
          "description": "The update time of task",
          "type": "string",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "TestId": {
      "type": "string",
      "x-go-package": "github.com/ipfs-force-community/brightbird/types"
    },
    "TriggerRetentionExecutionBody": {
      "description": "TriggerRetentionExecutionBody trigger retention execution body",
      "type": "object",
      "properties": {
        "dry_run": {
          "description": "dry run",
          "type": "boolean",
          "x-go-name": "DryRun"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/internal/api/client/retention"
    },
    "UserCreationReq": {
      "description": "UserCreationReq user creation req",
      "type": "object",
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "email": {
          "description": "email",
          "type": "string",
          "maxLength": 255,
          "x-go-name": "Email"
        },
        "password": {
          "description": "password",
          "type": "string",
          "x-go-name": "Password"
        },
        "realname": {
          "description": "realname",
          "type": "string",
          "x-go-name": "Realname"
        },
        "username": {
          "description": "username",
          "type": "string",
          "maxLength": 255,
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserEntity": {
      "description": "UserEntity user entity",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The ID of the user.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        },
        "username": {
          "description": "The name of the user.",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserGroup": {
      "description": "UserGroup user group",
      "type": "object",
      "properties": {
        "group_name": {
          "description": "The name of the user group",
          "type": "string",
          "x-go-name": "GroupName"
        },
        "group_type": {
          "description": "The group type, 1 for LDAP group, 2 for HTTP group, 3 for OIDC group.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "GroupType"
        },
        "id": {
          "description": "The ID of the user group",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "ldap_group_dn": {
          "description": "The DN of the LDAP group if group type is 1 (LDAP group).",
          "type": "string",
          "x-go-name": "LdapGroupDn"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserGroupSearchItem": {
      "description": "UserGroupSearchItem user group search item",
      "type": "object",
      "properties": {
        "group_name": {
          "description": "The name of the user group",
          "type": "string",
          "x-go-name": "GroupName"
        },
        "group_type": {
          "description": "The group type, 1 for LDAP group, 2 for HTTP group, 3 for OIDC group.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "GroupType"
        },
        "id": {
          "description": "The ID of the user group",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserProfile": {
      "description": "UserProfile user profile",
      "type": "object",
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "email": {
          "description": "email",
          "type": "string",
          "x-go-name": "Email"
        },
        "realname": {
          "description": "realname",
          "type": "string",
          "x-go-name": "Realname"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserResp": {
      "description": "UserResp user resp",
      "type": "object",
      "properties": {
        "admin_role_in_auth": {
          "description": "indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user",
          "type": "boolean",
          "x-go-name": "AdminRoleInAuth"
        },
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "creation_time": {
          "description": "The creation time of the user.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "email": {
          "description": "email",
          "type": "string",
          "x-go-name": "Email"
        },
        "oidc_user_meta": {
          "$ref": "#/definitions/OIDCUserInfo"
        },
        "realname": {
          "description": "realname",
          "type": "string",
          "x-go-name": "Realname"
        },
        "sysadmin_flag": {
          "description": "sysadmin flag",
          "type": "boolean",
          "x-go-name": "SysadminFlag"
        },
        "update_time": {
          "description": "The update time of the user.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        },
        "user_id": {
          "description": "user id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        },
        "username": {
          "description": "username",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserSearch": {
      "description": "UserSearch user search",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The ID of the user.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        },
        "username": {
          "description": "username",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserSearchRespItem": {
      "description": "UserSearchRespItem user search resp item",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The ID of the user.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        },
        "username": {
          "description": "username",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "UserSysAdminFlag": {
      "description": "UserSysAdminFlag user sys admin flag",
      "type": "object",
      "properties": {
        "sysadmin_flag": {
          "description": "true-admin, false-not admin.",
          "type": "boolean",
          "x-go-name": "SysadminFlag"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "VulnerabilitySummary": {
      "type": "object",
      "title": "VulnerabilitySummary VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.",
      "properties": {
        "fixable": {
          "description": "The number of the fixable vulnerabilities",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Fixable"
        },
        "summary": {
          "description": "Numbers of the vulnerabilities with different severity",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Summary"
        },
        "total": {
          "description": "The total number of the found vulnerabilities",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "WebhookJob": {
      "type": "object",
      "title": "WebhookJob The webhook job.",
      "properties": {
        "creation_time": {
          "description": "The webhook job creation time.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "event_type": {
          "description": "The webhook job event type.",
          "type": "string",
          "x-go-name": "EventType"
        },
        "id": {
          "description": "The webhook job ID.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "job_detail": {
          "description": "The webhook job notify detailed data.",
          "type": "string",
          "x-go-name": "JobDetail"
        },
        "notify_type": {
          "description": "The webhook job notify type.",
          "type": "string",
          "x-go-name": "NotifyType"
        },
        "policy_id": {
          "description": "The webhook policy ID.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PolicyID"
        },
        "status": {
          "description": "The webhook job status.",
          "type": "string",
          "x-go-name": "Status"
        },
        "update_time": {
          "description": "The webhook job update time.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "WebhookLastTrigger": {
      "type": "object",
      "title": "WebhookLastTrigger The webhook policy and last trigger time group by event type.",
      "properties": {
        "creation_time": {
          "description": "The creation time of webhook policy.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "enabled": {
          "description": "Whether or not the webhook policy enabled.",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "event_type": {
          "description": "The webhook event type.",
          "type": "string",
          "x-go-name": "EventType"
        },
        "last_trigger_time": {
          "description": "The last trigger time of webhook policy.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastTriggerTime"
        },
        "policy_name": {
          "description": "The webhook policy name.",
          "type": "string",
          "x-go-name": "PolicyName"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "WebhookPolicy": {
      "description": "WebhookPolicy The webhook policy object",
      "type": "object",
      "properties": {
        "creation_time": {
          "description": "The create time of the webhook policy.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "creator": {
          "description": "The creator of the webhook policy.",
          "type": "string",
          "x-go-name": "Creator"
        },
        "description": {
          "description": "The description of webhook policy.",
          "type": "string",
          "x-go-name": "Description"
        },
        "enabled": {
          "description": "Whether the webhook policy is enabled or not.",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "event_types": {
          "description": "event types",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EventTypes"
        },
        "id": {
          "description": "The webhook policy ID.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "description": "The name of webhook policy.",
          "type": "string",
          "x-go-name": "Name"
        },
        "project_id": {
          "description": "The project ID of webhook policy.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProjectID"
        },
        "targets": {
          "description": "targets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookTargetObject"
          },
          "x-go-name": "Targets"
        },
        "update_time": {
          "description": "The update time of the webhook policy.\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdateTime"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "WebhookTargetObject": {
      "type": "object",
      "title": "WebhookTargetObject The webhook policy target object.",
      "properties": {
        "address": {
          "description": "The webhook target address.",
          "type": "string",
          "x-go-name": "Address"
        },
        "auth_header": {
          "description": "The webhook auth header.",
          "type": "string",
          "x-go-name": "AuthHeader"
        },
        "skip_cert_verify": {
          "description": "Whether or not to skip cert verify.",
          "type": "boolean",
          "x-go-name": "SkipCertVerify"
        },
        "type": {
          "description": "The webhook target notify type.",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "Worker": {
      "description": "Worker worker in the pool",
      "type": "object",
      "properties": {
        "check_in": {
          "description": "the checkin of the running job in the worker",
          "type": "string",
          "x-go-name": "CheckIn"
        },
        "checkin_at": {
          "description": "The checkin time of the worker\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CheckinAt"
        },
        "id": {
          "description": "the id of the worker",
          "type": "string",
          "x-go-name": "ID"
        },
        "job_id": {
          "description": "the id of the running job in the worker",
          "type": "string",
          "x-go-name": "JobID"
        },
        "job_name": {
          "description": "the name of the running job in the worker",
          "type": "string",
          "x-go-name": "JobName"
        },
        "pool_id": {
          "description": "the id of the worker pool",
          "type": "string",
          "x-go-name": "PoolID"
        },
        "start_at": {
          "description": "The start time of the worker\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartAt"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "WorkerPool": {
      "description": "WorkerPool the worker pool of job service",
      "type": "object",
      "properties": {
        "concurrency": {
          "description": "The concurrency of the work pool",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Concurrency"
        },
        "heartbeat_at": {
          "description": "The heartbeat time of the work pool\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "HeartbeatAt"
        },
        "host": {
          "description": "The host of the work pool",
          "type": "string",
          "x-go-name": "Host"
        },
        "pid": {
          "description": "the process id of jobservice",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pid"
        },
        "start_at": {
          "description": "The start time of the work pool\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartAt"
        },
        "worker_pool_id": {
          "description": "the id of the worker pool",
          "type": "string",
          "x-go-name": "WorkerPoolID"
        }
      },
      "x-go-package": "github.com/mittwald/goharbor-client/v5/apiv2/model"
    },
    "apiError": {
      "description": "APIError",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-name": "APIError",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "changeTestflowGroupRequest": {
      "description": "ChangeTestflowGroupRequest",
      "type": "object",
      "required": [
        "groupId",
        "testflowIds"
      ],
      "properties": {
        "groupId": {
          "description": "Group to change",
          "type": "string",
          "x-go-name": "GroupID"
        },
        "testflowIds": {
          "description": "testflow id",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "TestflowIDs"
        }
      },
      "x-go-name": "ChangeTestflowGroupRequest",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "countGroupRequest": {
      "description": "CountGroupRequest",
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "x-go-name": "CountGroupRequest",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "group": {
      "description": "Group",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isShow": {
          "type": "boolean",
          "x-go-name": "IsShow"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "description": "the name for this test flow",
          "type": "string",
          "minLength": 3,
          "x-go-name": "Name"
        }
      },
      "x-go-name": "Group",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "groupResp": {
      "description": "GroupResp",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isShow": {
          "type": "boolean",
          "x-go-name": "IsShow"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "description": "the name for this test flow",
          "type": "string",
          "minLength": 3,
          "x-go-name": "Name"
        },
        "testFlowCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TestFlowCount"
        }
      },
      "x-go-name": "GroupResp",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "int64Arr": {
      "description": "Int64Array",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "int64"
      },
      "x-go-name": "Int64Array",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "job": {
      "description": "Job",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "cronExpression": {
          "type": "string",
          "x-go-name": "CronExpression"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "execCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExecCount"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "jobType": {
          "type": "string",
          "x-go-name": "JobType"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "prMergedEventMatchs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PRMergedEventMatch"
          },
          "x-go-name": "PRMergedEventMatchs"
        },
        "tagCreateEventMatchs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagCreateEventMatch"
          },
          "x-go-name": "TagCreateEventMatchs"
        },
        "testFlowId": {
          "type": "string",
          "x-go-name": "TestFlowId"
        },
        "versions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Versions"
        }
      },
      "x-go-name": "Job",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "jobDetailResp": {
      "description": "JobDetailResp",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "cronExpression": {
          "type": "string",
          "x-go-name": "CronExpression"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "execCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExecCount"
        },
        "groupName": {
          "type": "string",
          "x-go-name": "GroupName"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "jobType": {
          "type": "string",
          "x-go-name": "JobType"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "prMergedEventMatchs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PRMergedEventMatch"
          },
          "x-go-name": "PRMergedEventMatchs"
        },
        "tagCreateEventMatchs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagCreateEventMatch"
          },
          "x-go-name": "TagCreateEventMatchs"
        },
        "testFlowId": {
          "type": "string",
          "x-go-name": "TestFlowId"
        },
        "testFlowName": {
          "type": "string",
          "x-go-name": "TestFlowName"
        },
        "versions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Versions"
        }
      },
      "x-go-name": "JobDetailResp",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "listGroupResp": {
      "description": "ListGroupResp",
      "type": "array",
      "items": {
        "$ref": "#/definitions/groupResp"
      },
      "x-go-name": "ListGroupResp",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "listJobResp": {
      "description": "ListJobResp",
      "type": "array",
      "items": {
        "$ref": "#/definitions/job"
      },
      "x-go-name": "ListJobResp",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "listTasksResp": {
      "description": "ListTasksResp",
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/task"
          },
          "x-go-name": "List"
        },
        "pageNum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageNum"
        },
        "pages": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pages"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-name": "ListTasksResp",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "listTestFlowResp": {
      "description": "ListTestFlowResp",
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testFlow"
          },
          "x-go-name": "List"
        },
        "pageNum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageNum"
        },
        "pages": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Pages"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-name": "ListTestFlowResp",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "logListResp": {
      "description": "LogListResp",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-go-name": "LogListResp",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "logResp": {
      "description": "LogResp",
      "type": "object",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Logs"
        },
        "podName": {
          "type": "string",
          "x-go-name": "PodName"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stepLog"
          },
          "x-go-name": "Steps"
        }
      },
      "x-go-name": "LogResp",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "myString": {
      "description": "MyString repretation string",
      "type": "string",
      "x-go-name": "MyString",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "objectId": {
      "description": "ObjectId",
      "type": "string",
      "x-go-name": "ObjectId",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "plugin": {
      "description": "Plugin",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "imageTarget": {
          "type": "string",
          "x-go-name": "ImageTarget"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "pluginType": {
          "type": "string",
          "x-go-name": "PluginType"
        },
        "repo": {
          "type": "string",
          "x-go-name": "Repo"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "PluginDef",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "pluginDetail": {
      "description": "PluginDetail",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "pluginDefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/plugin"
          },
          "x-go-name": "PluginDefs"
        },
        "pluginType": {
          "type": "string",
          "x-go-name": "PluginType"
        }
      },
      "x-go-name": "PluginDetail",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "stepLog": {
      "description": "StepLog",
      "type": "object",
      "properties": {
        "instanceName": {
          "type": "string",
          "x-go-name": "InstanceName"
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Logs"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "state": {
          "$ref": "#/definitions/StepState"
        }
      },
      "x-go-name": "StepLog",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "stringArr": {
      "description": "StringArray",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-go-name": "StringArray",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "task": {
      "description": "Task",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "inheritVersions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "InheritVersions"
        },
        "jobId": {
          "type": "string",
          "x-go-name": "JobId"
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Logs"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "podName": {
          "type": "string",
          "x-go-name": "PodName"
        },
        "retryTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RetryTime"
        },
        "state": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "State"
        },
        "testFlowId": {
          "type": "string",
          "x-go-name": "TestFlowId"
        },
        "testId": {
          "$ref": "#/definitions/TestId"
        },
        "versions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "CommitMap"
        }
      },
      "x-go-name": "Task",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "testFlow": {
      "description": "TestFlow",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "createTime": {
          "description": "创建时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "CreateTime"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "graph": {
          "type": "string",
          "x-go-name": "Graph"
        },
        "groupId": {
          "type": "string",
          "x-go-name": "GroupId"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "modifiedTime": {
          "description": "最后修改时间",
          "type": "string",
          "format": "int64",
          "x-go-name": "ModifiedTime"
        },
        "name": {
          "description": "the name for this test flow",
          "type": "string",
          "minLength": 3,
          "x-go-name": "Name"
        }
      },
      "x-go-name": "TestFlow",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "updateGroupRequest": {
      "description": "UpdateGroupRequest",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "isShow": {
          "type": "boolean",
          "x-go-name": "IsShow"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "UpdateGroupRequest",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    },
    "updateJobRequest": {
      "description": "UpdateJobRequest",
      "type": "object",
      "properties": {
        "cronExpression": {
          "type": "string",
          "x-go-name": "CronExpression"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "testFlowId": {
          "type": "string",
          "x-go-name": "TestFlowId"
        },
        "versions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Versions"
        }
      },
      "x-go-name": "UpdateJobRequest",
      "x-go-package": "github.com/ipfs-force-community/brightbird/models"
    }
  },
  "x-meta-array": [
    "value1",
    "value2"
  ],
  "x-meta-array-obj": [
    {
      "name": "obj",
      "value": "field"
    }
  ],
  "x-meta-value": "value"
}