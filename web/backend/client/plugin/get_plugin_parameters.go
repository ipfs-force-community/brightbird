// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPluginParams creates a new GetPluginParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPluginParams() *GetPluginParams {
	return &GetPluginParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPluginParamsWithTimeout creates a new GetPluginParams object
// with the ability to set a timeout on a request.
func NewGetPluginParamsWithTimeout(timeout time.Duration) *GetPluginParams {
	return &GetPluginParams{
		timeout: timeout,
	}
}

// NewGetPluginParamsWithContext creates a new GetPluginParams object
// with the ability to set a context for a request.
func NewGetPluginParamsWithContext(ctx context.Context) *GetPluginParams {
	return &GetPluginParams{
		Context: ctx,
	}
}

// NewGetPluginParamsWithHTTPClient creates a new GetPluginParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPluginParamsWithHTTPClient(client *http.Client) *GetPluginParams {
	return &GetPluginParams{
		HTTPClient: client,
	}
}

/*
GetPluginParams contains all the parameters to send to the API endpoint

	for the get plugin operation.

	Typically these are written to a http.Request.
*/
type GetPluginParams struct {

	/* Name.

	   name of plugin
	*/
	Name *string

	/* PluginType.

	   pluginType of plugin
	*/
	PluginType *string

	/* Version.

	   version of plugin
	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get plugin params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPluginParams) WithDefaults() *GetPluginParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get plugin params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPluginParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get plugin params
func (o *GetPluginParams) WithTimeout(timeout time.Duration) *GetPluginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get plugin params
func (o *GetPluginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get plugin params
func (o *GetPluginParams) WithContext(ctx context.Context) *GetPluginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get plugin params
func (o *GetPluginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get plugin params
func (o *GetPluginParams) WithHTTPClient(client *http.Client) *GetPluginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get plugin params
func (o *GetPluginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get plugin params
func (o *GetPluginParams) WithName(name *string) *GetPluginParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get plugin params
func (o *GetPluginParams) SetName(name *string) {
	o.Name = name
}

// WithPluginType adds the pluginType to the get plugin params
func (o *GetPluginParams) WithPluginType(pluginType *string) *GetPluginParams {
	o.SetPluginType(pluginType)
	return o
}

// SetPluginType adds the pluginType to the get plugin params
func (o *GetPluginParams) SetPluginType(pluginType *string) {
	o.PluginType = pluginType
}

// WithVersion adds the version to the get plugin params
func (o *GetPluginParams) WithVersion(version *string) *GetPluginParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get plugin params
func (o *GetPluginParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *GetPluginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.PluginType != nil {

		// query param pluginType
		var qrPluginType string

		if o.PluginType != nil {
			qrPluginType = *o.PluginType
		}
		qPluginType := qrPluginType
		if qPluginType != "" {

			if err := r.SetQueryParam("pluginType", qPluginType); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion string

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
