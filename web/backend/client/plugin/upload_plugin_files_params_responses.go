// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hunjixin/brightbird/models"
)

// UploadPluginFilesParamsReader is a Reader for the UploadPluginFilesParams structure.
type UploadPluginFilesParamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadPluginFilesParamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadPluginFilesParamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUploadPluginFilesParamsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadPluginFilesParamsOK creates a UploadPluginFilesParamsOK with default headers values
func NewUploadPluginFilesParamsOK() *UploadPluginFilesParamsOK {
	return &UploadPluginFilesParamsOK{}
}

/*
UploadPluginFilesParamsOK describes a response with status code 200, with default header values.

UploadPluginFilesParamsOK upload plugin files params o k
*/
type UploadPluginFilesParamsOK struct {
}

// IsSuccess returns true when this upload plugin files params o k response has a 2xx status code
func (o *UploadPluginFilesParamsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload plugin files params o k response has a 3xx status code
func (o *UploadPluginFilesParamsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload plugin files params o k response has a 4xx status code
func (o *UploadPluginFilesParamsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload plugin files params o k response has a 5xx status code
func (o *UploadPluginFilesParamsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload plugin files params o k response a status code equal to that given
func (o *UploadPluginFilesParamsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upload plugin files params o k response
func (o *UploadPluginFilesParamsOK) Code() int {
	return 200
}

func (o *UploadPluginFilesParamsOK) Error() string {
	return fmt.Sprintf("[POST /plugin/upload][%d] uploadPluginFilesParamsOK ", 200)
}

func (o *UploadPluginFilesParamsOK) String() string {
	return fmt.Sprintf("[POST /plugin/upload][%d] uploadPluginFilesParamsOK ", 200)
}

func (o *UploadPluginFilesParamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadPluginFilesParamsForbidden creates a UploadPluginFilesParamsForbidden with default headers values
func NewUploadPluginFilesParamsForbidden() *UploadPluginFilesParamsForbidden {
	return &UploadPluginFilesParamsForbidden{}
}

/*
UploadPluginFilesParamsForbidden describes a response with status code 403, with default header values.

apiError
*/
type UploadPluginFilesParamsForbidden struct {
	Payload *models.APIError
}

// IsSuccess returns true when this upload plugin files params forbidden response has a 2xx status code
func (o *UploadPluginFilesParamsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload plugin files params forbidden response has a 3xx status code
func (o *UploadPluginFilesParamsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload plugin files params forbidden response has a 4xx status code
func (o *UploadPluginFilesParamsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload plugin files params forbidden response has a 5xx status code
func (o *UploadPluginFilesParamsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upload plugin files params forbidden response a status code equal to that given
func (o *UploadPluginFilesParamsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upload plugin files params forbidden response
func (o *UploadPluginFilesParamsForbidden) Code() int {
	return 403
}

func (o *UploadPluginFilesParamsForbidden) Error() string {
	return fmt.Sprintf("[POST /plugin/upload][%d] uploadPluginFilesParamsForbidden  %+v", 403, o.Payload)
}

func (o *UploadPluginFilesParamsForbidden) String() string {
	return fmt.Sprintf("[POST /plugin/upload][%d] uploadPluginFilesParamsForbidden  %+v", 403, o.Payload)
}

func (o *UploadPluginFilesParamsForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UploadPluginFilesParamsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
