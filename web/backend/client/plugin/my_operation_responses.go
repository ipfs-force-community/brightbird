// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hunjixin/brightbird/models"
)

// MyOperationReader is a Reader for the MyOperation structure.
type MyOperationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MyOperationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMyOperationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewMyOperationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMyOperationOK creates a MyOperationOK with default headers values
func NewMyOperationOK() *MyOperationOK {
	return &MyOperationOK{}
}

/*
MyOperationOK describes a response with status code 200, with default header values.

MyOperationOK my operation o k
*/
type MyOperationOK struct {
}

// IsSuccess returns true when this my operation o k response has a 2xx status code
func (o *MyOperationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this my operation o k response has a 3xx status code
func (o *MyOperationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this my operation o k response has a 4xx status code
func (o *MyOperationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this my operation o k response has a 5xx status code
func (o *MyOperationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this my operation o k response a status code equal to that given
func (o *MyOperationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the my operation o k response
func (o *MyOperationOK) Code() int {
	return 200
}

func (o *MyOperationOK) Error() string {
	return fmt.Sprintf("[POST /plugin/upload][%d] myOperationOK ", 200)
}

func (o *MyOperationOK) String() string {
	return fmt.Sprintf("[POST /plugin/upload][%d] myOperationOK ", 200)
}

func (o *MyOperationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMyOperationForbidden creates a MyOperationForbidden with default headers values
func NewMyOperationForbidden() *MyOperationForbidden {
	return &MyOperationForbidden{}
}

/*
MyOperationForbidden describes a response with status code 403, with default header values.

apiError
*/
type MyOperationForbidden struct {
	Payload *models.APIError
}

// IsSuccess returns true when this my operation forbidden response has a 2xx status code
func (o *MyOperationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this my operation forbidden response has a 3xx status code
func (o *MyOperationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this my operation forbidden response has a 4xx status code
func (o *MyOperationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this my operation forbidden response has a 5xx status code
func (o *MyOperationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this my operation forbidden response a status code equal to that given
func (o *MyOperationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the my operation forbidden response
func (o *MyOperationForbidden) Code() int {
	return 403
}

func (o *MyOperationForbidden) Error() string {
	return fmt.Sprintf("[POST /plugin/upload][%d] myOperationForbidden  %+v", 403, o.Payload)
}

func (o *MyOperationForbidden) String() string {
	return fmt.Sprintf("[POST /plugin/upload][%d] myOperationForbidden  %+v", 403, o.Payload)
}

func (o *MyOperationForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *MyOperationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
