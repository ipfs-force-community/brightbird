apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: venus-gateway-{{.UniqueId}}
spec:
  replicas: {{.Replicas}}
  serviceName: venus-gateway-{{.UniqueId}}-svc
  selector:
    matchLabels:
      app: venus-gateway-{{.UniqueId}}-pod
  template:
    metadata:
      labels:
        app: venus-gateway-{{.UniqueId}}-pod
    spec:
      initContainers:
        - name: init-myservice
          image: {{if gt (len .PrivateRegistry) 0}}{{.PrivateRegistry}}/{{end}}library/busybox:1.35
          command: ['sh', '-c', "mkdir -p /root/.venusgateway; cp /root/config.tmp /root/.venusgateway/config.toml"]
          volumeMounts:
            - mountPath: /root
              name: venus-gateway-pvc
            - name: venus-gateway-cfg
              mountPath: "/root/config.tmp"
              subPath: "config.toml"
      containers:
        - name: venus-gateway-{{.UniqueId}}
          image: "{{if gt (len .PrivateRegistry) 0}}{{.PrivateRegistry}}/{{end}}filvenus/venus-gateway:{{.CodeVersion}}"
          args: ["run"]
          ports:
            - containerPort: 45132
              protocol: TCP
          volumeMounts:
            - mountPath: /root
              name: venus-gateway-pvc
            - name: venus-gateway-cfg
              mountPath: "/root/config.tmp"
              subPath: "config.toml"
      volumes:
        - name: venus-gateway-cfg
          configMap:
            name: venus-gateway-{{.UniqueId}}
            items:
              - key: config.toml
                path: config.toml  
  volumeClaimTemplates:
    - metadata:
        name: venus-gateway-pvc # name+podname
        labels:
          app: venus-gateway-{{.UniqueId}}-pvc
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "nfs-client"
        resources:
          requests:
            storage: 100Mi